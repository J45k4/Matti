// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MattiRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MattiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MattiRequest_reflection_ = NULL;
struct MattiRequestOneofInstance {
  ::google::protobuf::uint32 requestvalues_;
  ::google::protobuf::uint32 requestmatrixstates_;
  const ::VideoConnection* insertvideoconnection_;
  const ::KwmConnection* insertkwmconnection_;
  const ::MatrixProto* insertmatrix_;
  const ::Timer* inserttimer_;
  const ::Program* insertprogram_;
  ::google::protobuf::uint32 removevideoconnection_;
  ::google::protobuf::uint32 removekwmconnection_;
  ::google::protobuf::uint32 removematrix_;
  ::google::protobuf::uint32 removetimer_;
  ::google::protobuf::uint32 removeprogram_;
}* MattiRequest_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_MattiRequest_2eproto() {
  protobuf_AddDesc_MattiRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MattiRequest.proto");
  GOOGLE_CHECK(file != NULL);
  MattiRequest_descriptor_ = file->message_type(0);
  static const int MattiRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiRequest, ticket_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, requestvalues_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, requestmatrixstates_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, insertvideoconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, insertkwmconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, insertmatrix_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, inserttimer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, insertprogram_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, removevideoconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, removekwmconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, removematrix_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, removetimer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiRequest_default_oneof_instance_, removeprogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiRequest, requestMessage_),
  };
  MattiRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MattiRequest_descriptor_,
      MattiRequest::default_instance_,
      MattiRequest_offsets_,
      -1,
      -1,
      -1,
      MattiRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiRequest, _oneof_case_[0]),
      sizeof(MattiRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MattiRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MattiRequest_descriptor_, &MattiRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MattiRequest_2eproto() {
  delete MattiRequest::default_instance_;
  delete MattiRequest_default_oneof_instance_;
  delete MattiRequest_reflection_;
}

void protobuf_AddDesc_MattiRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_VideoConnection_2eproto();
  ::protobuf_AddDesc_KwmConnection_2eproto();
  ::protobuf_AddDesc_Matrix_2eproto();
  ::protobuf_AddDesc_Program_2eproto();
  ::protobuf_AddDesc_Timer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MattiRequest.proto\032\025VideoConnection.pr"
    "oto\032\023KwmConnection.proto\032\014Matrix.proto\032\r"
    "Program.proto\032\013Timer.proto\"\272\003\n\014MattiRequ"
    "est\022\016\n\006ticket\030\001 \001(\r\022\027\n\rrequestValues\030\002 \001"
    "(\rH\000\022\035\n\023requestMatrixStates\030\003 \001(\rH\000\0221\n\025i"
    "nsertVideoConnection\030\004 \001(\0132\020.VideoConnec"
    "tionH\000\022-\n\023insertKwmConnection\030\005 \001(\0132\016.Kw"
    "mConnectionH\000\022$\n\014insertMatrix\030\006 \001(\0132\014.Ma"
    "trixProtoH\000\022\035\n\013insertTimer\030\007 \001(\0132\006.Timer"
    "H\000\022!\n\rinsertProgram\030\010 \001(\0132\010.ProgramH\000\022\037\n"
    "\025removeVideoConnection\030\t \001(\rH\000\022\035\n\023remove"
    "KwmConnection\030\n \001(\rH\000\022\026\n\014removeMatrix\030\013 "
    "\001(\rH\000\022\025\n\013removeTimer\030\014 \001(\rH\000\022\027\n\rremovePr"
    "ogram\030\r \001(\rH\000B\020\n\016requestMessageb\006proto3", 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MattiRequest.proto", &protobuf_RegisterTypes);
  MattiRequest::default_instance_ = new MattiRequest();
  MattiRequest_default_oneof_instance_ = new MattiRequestOneofInstance();
  MattiRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MattiRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MattiRequest_2eproto {
  StaticDescriptorInitializer_MattiRequest_2eproto() {
    protobuf_AddDesc_MattiRequest_2eproto();
  }
} static_descriptor_initializer_MattiRequest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MattiRequest::kTicketFieldNumber;
const int MattiRequest::kRequestValuesFieldNumber;
const int MattiRequest::kRequestMatrixStatesFieldNumber;
const int MattiRequest::kInsertVideoConnectionFieldNumber;
const int MattiRequest::kInsertKwmConnectionFieldNumber;
const int MattiRequest::kInsertMatrixFieldNumber;
const int MattiRequest::kInsertTimerFieldNumber;
const int MattiRequest::kInsertProgramFieldNumber;
const int MattiRequest::kRemoveVideoConnectionFieldNumber;
const int MattiRequest::kRemoveKwmConnectionFieldNumber;
const int MattiRequest::kRemoveMatrixFieldNumber;
const int MattiRequest::kRemoveTimerFieldNumber;
const int MattiRequest::kRemoveProgramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MattiRequest::MattiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MattiRequest)
}

void MattiRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MattiRequest_default_oneof_instance_->requestvalues_ = 0u;
  MattiRequest_default_oneof_instance_->requestmatrixstates_ = 0u;
  MattiRequest_default_oneof_instance_->insertvideoconnection_ = const_cast< ::VideoConnection*>(&::VideoConnection::default_instance());
  MattiRequest_default_oneof_instance_->insertkwmconnection_ = const_cast< ::KwmConnection*>(&::KwmConnection::default_instance());
  MattiRequest_default_oneof_instance_->insertmatrix_ = const_cast< ::MatrixProto*>(&::MatrixProto::default_instance());
  MattiRequest_default_oneof_instance_->inserttimer_ = const_cast< ::Timer*>(&::Timer::default_instance());
  MattiRequest_default_oneof_instance_->insertprogram_ = const_cast< ::Program*>(&::Program::default_instance());
  MattiRequest_default_oneof_instance_->removevideoconnection_ = 0u;
  MattiRequest_default_oneof_instance_->removekwmconnection_ = 0u;
  MattiRequest_default_oneof_instance_->removematrix_ = 0u;
  MattiRequest_default_oneof_instance_->removetimer_ = 0u;
  MattiRequest_default_oneof_instance_->removeprogram_ = 0u;
}

MattiRequest::MattiRequest(const MattiRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MattiRequest)
}

void MattiRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ticket_ = 0u;
  clear_has_requestMessage();
}

MattiRequest::~MattiRequest() {
  // @@protoc_insertion_point(destructor:MattiRequest)
  SharedDtor();
}

void MattiRequest::SharedDtor() {
  if (has_requestMessage()) {
    clear_requestMessage();
  }
  if (this != default_instance_) {
  }
}

void MattiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MattiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MattiRequest_descriptor_;
}

const MattiRequest& MattiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MattiRequest_2eproto();
  return *default_instance_;
}

MattiRequest* MattiRequest::default_instance_ = NULL;

MattiRequest* MattiRequest::New(::google::protobuf::Arena* arena) const {
  MattiRequest* n = new MattiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MattiRequest::clear_requestMessage() {
  switch(requestMessage_case()) {
    case kRequestValues: {
      // No need to clear
      break;
    }
    case kRequestMatrixStates: {
      // No need to clear
      break;
    }
    case kInsertVideoConnection: {
      delete requestMessage_.insertvideoconnection_;
      break;
    }
    case kInsertKwmConnection: {
      delete requestMessage_.insertkwmconnection_;
      break;
    }
    case kInsertMatrix: {
      delete requestMessage_.insertmatrix_;
      break;
    }
    case kInsertTimer: {
      delete requestMessage_.inserttimer_;
      break;
    }
    case kInsertProgram: {
      delete requestMessage_.insertprogram_;
      break;
    }
    case kRemoveVideoConnection: {
      // No need to clear
      break;
    }
    case kRemoveKwmConnection: {
      // No need to clear
      break;
    }
    case kRemoveMatrix: {
      // No need to clear
      break;
    }
    case kRemoveTimer: {
      // No need to clear
      break;
    }
    case kRemoveProgram: {
      // No need to clear
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}


void MattiRequest::Clear() {
  ticket_ = 0u;
  clear_requestMessage();
}

bool MattiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MattiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_requestValues;
        break;
      }

      // optional uint32 requestValues = 2;
      case 2: {
        if (tag == 16) {
         parse_requestValues:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.requestvalues_)));
          set_has_requestvalues();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_requestMatrixStates;
        break;
      }

      // optional uint32 requestMatrixStates = 3;
      case 3: {
        if (tag == 24) {
         parse_requestMatrixStates:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.requestmatrixstates_)));
          set_has_requestmatrixstates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_insertVideoConnection;
        break;
      }

      // optional .VideoConnection insertVideoConnection = 4;
      case 4: {
        if (tag == 34) {
         parse_insertVideoConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insertvideoconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_insertKwmConnection;
        break;
      }

      // optional .KwmConnection insertKwmConnection = 5;
      case 5: {
        if (tag == 42) {
         parse_insertKwmConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insertkwmconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_insertMatrix;
        break;
      }

      // optional .MatrixProto insertMatrix = 6;
      case 6: {
        if (tag == 50) {
         parse_insertMatrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insertmatrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_insertTimer;
        break;
      }

      // optional .Timer insertTimer = 7;
      case 7: {
        if (tag == 58) {
         parse_insertTimer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inserttimer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_insertProgram;
        break;
      }

      // optional .Program insertProgram = 8;
      case 8: {
        if (tag == 66) {
         parse_insertProgram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insertprogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_removeVideoConnection;
        break;
      }

      // optional uint32 removeVideoConnection = 9;
      case 9: {
        if (tag == 72) {
         parse_removeVideoConnection:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.removevideoconnection_)));
          set_has_removevideoconnection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_removeKwmConnection;
        break;
      }

      // optional uint32 removeKwmConnection = 10;
      case 10: {
        if (tag == 80) {
         parse_removeKwmConnection:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.removekwmconnection_)));
          set_has_removekwmconnection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_removeMatrix;
        break;
      }

      // optional uint32 removeMatrix = 11;
      case 11: {
        if (tag == 88) {
         parse_removeMatrix:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.removematrix_)));
          set_has_removematrix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_removeTimer;
        break;
      }

      // optional uint32 removeTimer = 12;
      case 12: {
        if (tag == 96) {
         parse_removeTimer:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.removetimer_)));
          set_has_removetimer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_removeProgram;
        break;
      }

      // optional uint32 removeProgram = 13;
      case 13: {
        if (tag == 104) {
         parse_removeProgram:
          clear_requestMessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestMessage_.removeprogram_)));
          set_has_removeprogram();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MattiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MattiRequest)
  return false;
#undef DO_
}

void MattiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MattiRequest)
  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticket(), output);
  }

  // optional uint32 requestValues = 2;
  if (has_requestvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->requestvalues(), output);
  }

  // optional uint32 requestMatrixStates = 3;
  if (has_requestmatrixstates()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->requestmatrixstates(), output);
  }

  // optional .VideoConnection insertVideoConnection = 4;
  if (has_insertvideoconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *requestMessage_.insertvideoconnection_, output);
  }

  // optional .KwmConnection insertKwmConnection = 5;
  if (has_insertkwmconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *requestMessage_.insertkwmconnection_, output);
  }

  // optional .MatrixProto insertMatrix = 6;
  if (has_insertmatrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *requestMessage_.insertmatrix_, output);
  }

  // optional .Timer insertTimer = 7;
  if (has_inserttimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *requestMessage_.inserttimer_, output);
  }

  // optional .Program insertProgram = 8;
  if (has_insertprogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *requestMessage_.insertprogram_, output);
  }

  // optional uint32 removeVideoConnection = 9;
  if (has_removevideoconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->removevideoconnection(), output);
  }

  // optional uint32 removeKwmConnection = 10;
  if (has_removekwmconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->removekwmconnection(), output);
  }

  // optional uint32 removeMatrix = 11;
  if (has_removematrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->removematrix(), output);
  }

  // optional uint32 removeTimer = 12;
  if (has_removetimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->removetimer(), output);
  }

  // optional uint32 removeProgram = 13;
  if (has_removeprogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->removeprogram(), output);
  }

  // @@protoc_insertion_point(serialize_end:MattiRequest)
}

::google::protobuf::uint8* MattiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MattiRequest)
  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticket(), target);
  }

  // optional uint32 requestValues = 2;
  if (has_requestvalues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->requestvalues(), target);
  }

  // optional uint32 requestMatrixStates = 3;
  if (has_requestmatrixstates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->requestmatrixstates(), target);
  }

  // optional .VideoConnection insertVideoConnection = 4;
  if (has_insertvideoconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *requestMessage_.insertvideoconnection_, target);
  }

  // optional .KwmConnection insertKwmConnection = 5;
  if (has_insertkwmconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *requestMessage_.insertkwmconnection_, target);
  }

  // optional .MatrixProto insertMatrix = 6;
  if (has_insertmatrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *requestMessage_.insertmatrix_, target);
  }

  // optional .Timer insertTimer = 7;
  if (has_inserttimer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *requestMessage_.inserttimer_, target);
  }

  // optional .Program insertProgram = 8;
  if (has_insertprogram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *requestMessage_.insertprogram_, target);
  }

  // optional uint32 removeVideoConnection = 9;
  if (has_removevideoconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->removevideoconnection(), target);
  }

  // optional uint32 removeKwmConnection = 10;
  if (has_removekwmconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->removekwmconnection(), target);
  }

  // optional uint32 removeMatrix = 11;
  if (has_removematrix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->removematrix(), target);
  }

  // optional uint32 removeTimer = 12;
  if (has_removetimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->removetimer(), target);
  }

  // optional uint32 removeProgram = 13;
  if (has_removeprogram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->removeprogram(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MattiRequest)
  return target;
}

int MattiRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ticket());
  }

  switch (requestMessage_case()) {
    // optional uint32 requestValues = 2;
    case kRequestValues: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestvalues());
      break;
    }
    // optional uint32 requestMatrixStates = 3;
    case kRequestMatrixStates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestmatrixstates());
      break;
    }
    // optional .VideoConnection insertVideoConnection = 4;
    case kInsertVideoConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.insertvideoconnection_);
      break;
    }
    // optional .KwmConnection insertKwmConnection = 5;
    case kInsertKwmConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.insertkwmconnection_);
      break;
    }
    // optional .MatrixProto insertMatrix = 6;
    case kInsertMatrix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.insertmatrix_);
      break;
    }
    // optional .Timer insertTimer = 7;
    case kInsertTimer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.inserttimer_);
      break;
    }
    // optional .Program insertProgram = 8;
    case kInsertProgram: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.insertprogram_);
      break;
    }
    // optional uint32 removeVideoConnection = 9;
    case kRemoveVideoConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->removevideoconnection());
      break;
    }
    // optional uint32 removeKwmConnection = 10;
    case kRemoveKwmConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->removekwmconnection());
      break;
    }
    // optional uint32 removeMatrix = 11;
    case kRemoveMatrix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->removematrix());
      break;
    }
    // optional uint32 removeTimer = 12;
    case kRemoveTimer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->removetimer());
      break;
    }
    // optional uint32 removeProgram = 13;
    case kRemoveProgram: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->removeprogram());
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MattiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MattiRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MattiRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MattiRequest::MergeFrom(const MattiRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.requestMessage_case()) {
    case kRequestValues: {
      set_requestvalues(from.requestvalues());
      break;
    }
    case kRequestMatrixStates: {
      set_requestmatrixstates(from.requestmatrixstates());
      break;
    }
    case kInsertVideoConnection: {
      mutable_insertvideoconnection()->::VideoConnection::MergeFrom(from.insertvideoconnection());
      break;
    }
    case kInsertKwmConnection: {
      mutable_insertkwmconnection()->::KwmConnection::MergeFrom(from.insertkwmconnection());
      break;
    }
    case kInsertMatrix: {
      mutable_insertmatrix()->::MatrixProto::MergeFrom(from.insertmatrix());
      break;
    }
    case kInsertTimer: {
      mutable_inserttimer()->::Timer::MergeFrom(from.inserttimer());
      break;
    }
    case kInsertProgram: {
      mutable_insertprogram()->::Program::MergeFrom(from.insertprogram());
      break;
    }
    case kRemoveVideoConnection: {
      set_removevideoconnection(from.removevideoconnection());
      break;
    }
    case kRemoveKwmConnection: {
      set_removekwmconnection(from.removekwmconnection());
      break;
    }
    case kRemoveMatrix: {
      set_removematrix(from.removematrix());
      break;
    }
    case kRemoveTimer: {
      set_removetimer(from.removetimer());
      break;
    }
    case kRemoveProgram: {
      set_removeprogram(from.removeprogram());
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void MattiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MattiRequest::CopyFrom(const MattiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MattiRequest::IsInitialized() const {

  return true;
}

void MattiRequest::Swap(MattiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MattiRequest::InternalSwap(MattiRequest* other) {
  std::swap(ticket_, other->ticket_);
  std::swap(requestMessage_, other->requestMessage_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MattiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MattiRequest_descriptor_;
  metadata.reflection = MattiRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiRequest

// optional uint32 ticket = 1;
void MattiRequest::clear_ticket() {
  ticket_ = 0u;
}
 ::google::protobuf::uint32 MattiRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MattiRequest.ticket)
  return ticket_;
}
 void MattiRequest::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.ticket)
}

// optional uint32 requestValues = 2;
bool MattiRequest::has_requestvalues() const {
  return requestMessage_case() == kRequestValues;
}
void MattiRequest::set_has_requestvalues() {
  _oneof_case_[0] = kRequestValues;
}
void MattiRequest::clear_requestvalues() {
  if (has_requestvalues()) {
    requestMessage_.requestvalues_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::requestvalues() const {
  // @@protoc_insertion_point(field_get:MattiRequest.requestValues)
  if (has_requestvalues()) {
    return requestMessage_.requestvalues_;
  }
  return 0u;
}
 void MattiRequest::set_requestvalues(::google::protobuf::uint32 value) {
  if (!has_requestvalues()) {
    clear_requestMessage();
    set_has_requestvalues();
  }
  requestMessage_.requestvalues_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.requestValues)
}

// optional uint32 requestMatrixStates = 3;
bool MattiRequest::has_requestmatrixstates() const {
  return requestMessage_case() == kRequestMatrixStates;
}
void MattiRequest::set_has_requestmatrixstates() {
  _oneof_case_[0] = kRequestMatrixStates;
}
void MattiRequest::clear_requestmatrixstates() {
  if (has_requestmatrixstates()) {
    requestMessage_.requestmatrixstates_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::requestmatrixstates() const {
  // @@protoc_insertion_point(field_get:MattiRequest.requestMatrixStates)
  if (has_requestmatrixstates()) {
    return requestMessage_.requestmatrixstates_;
  }
  return 0u;
}
 void MattiRequest::set_requestmatrixstates(::google::protobuf::uint32 value) {
  if (!has_requestmatrixstates()) {
    clear_requestMessage();
    set_has_requestmatrixstates();
  }
  requestMessage_.requestmatrixstates_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.requestMatrixStates)
}

// optional .VideoConnection insertVideoConnection = 4;
bool MattiRequest::has_insertvideoconnection() const {
  return requestMessage_case() == kInsertVideoConnection;
}
void MattiRequest::set_has_insertvideoconnection() {
  _oneof_case_[0] = kInsertVideoConnection;
}
void MattiRequest::clear_insertvideoconnection() {
  if (has_insertvideoconnection()) {
    delete requestMessage_.insertvideoconnection_;
    clear_has_requestMessage();
  }
}
 const ::VideoConnection& MattiRequest::insertvideoconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertVideoConnection)
  return has_insertvideoconnection()
      ? *requestMessage_.insertvideoconnection_
      : ::VideoConnection::default_instance();
}
::VideoConnection* MattiRequest::mutable_insertvideoconnection() {
  if (!has_insertvideoconnection()) {
    clear_requestMessage();
    set_has_insertvideoconnection();
    requestMessage_.insertvideoconnection_ = new ::VideoConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertVideoConnection)
  return requestMessage_.insertvideoconnection_;
}
::VideoConnection* MattiRequest::release_insertvideoconnection() {
  if (has_insertvideoconnection()) {
    clear_has_requestMessage();
    ::VideoConnection* temp = requestMessage_.insertvideoconnection_;
    requestMessage_.insertvideoconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiRequest::set_allocated_insertvideoconnection(::VideoConnection* insertvideoconnection) {
  clear_requestMessage();
  if (insertvideoconnection) {
    set_has_insertvideoconnection();
    requestMessage_.insertvideoconnection_ = insertvideoconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertVideoConnection)
}

// optional .KwmConnection insertKwmConnection = 5;
bool MattiRequest::has_insertkwmconnection() const {
  return requestMessage_case() == kInsertKwmConnection;
}
void MattiRequest::set_has_insertkwmconnection() {
  _oneof_case_[0] = kInsertKwmConnection;
}
void MattiRequest::clear_insertkwmconnection() {
  if (has_insertkwmconnection()) {
    delete requestMessage_.insertkwmconnection_;
    clear_has_requestMessage();
  }
}
 const ::KwmConnection& MattiRequest::insertkwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertKwmConnection)
  return has_insertkwmconnection()
      ? *requestMessage_.insertkwmconnection_
      : ::KwmConnection::default_instance();
}
::KwmConnection* MattiRequest::mutable_insertkwmconnection() {
  if (!has_insertkwmconnection()) {
    clear_requestMessage();
    set_has_insertkwmconnection();
    requestMessage_.insertkwmconnection_ = new ::KwmConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertKwmConnection)
  return requestMessage_.insertkwmconnection_;
}
::KwmConnection* MattiRequest::release_insertkwmconnection() {
  if (has_insertkwmconnection()) {
    clear_has_requestMessage();
    ::KwmConnection* temp = requestMessage_.insertkwmconnection_;
    requestMessage_.insertkwmconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiRequest::set_allocated_insertkwmconnection(::KwmConnection* insertkwmconnection) {
  clear_requestMessage();
  if (insertkwmconnection) {
    set_has_insertkwmconnection();
    requestMessage_.insertkwmconnection_ = insertkwmconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertKwmConnection)
}

// optional .MatrixProto insertMatrix = 6;
bool MattiRequest::has_insertmatrix() const {
  return requestMessage_case() == kInsertMatrix;
}
void MattiRequest::set_has_insertmatrix() {
  _oneof_case_[0] = kInsertMatrix;
}
void MattiRequest::clear_insertmatrix() {
  if (has_insertmatrix()) {
    delete requestMessage_.insertmatrix_;
    clear_has_requestMessage();
  }
}
 const ::MatrixProto& MattiRequest::insertmatrix() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertMatrix)
  return has_insertmatrix()
      ? *requestMessage_.insertmatrix_
      : ::MatrixProto::default_instance();
}
::MatrixProto* MattiRequest::mutable_insertmatrix() {
  if (!has_insertmatrix()) {
    clear_requestMessage();
    set_has_insertmatrix();
    requestMessage_.insertmatrix_ = new ::MatrixProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertMatrix)
  return requestMessage_.insertmatrix_;
}
::MatrixProto* MattiRequest::release_insertmatrix() {
  if (has_insertmatrix()) {
    clear_has_requestMessage();
    ::MatrixProto* temp = requestMessage_.insertmatrix_;
    requestMessage_.insertmatrix_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiRequest::set_allocated_insertmatrix(::MatrixProto* insertmatrix) {
  clear_requestMessage();
  if (insertmatrix) {
    set_has_insertmatrix();
    requestMessage_.insertmatrix_ = insertmatrix;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertMatrix)
}

// optional .Timer insertTimer = 7;
bool MattiRequest::has_inserttimer() const {
  return requestMessage_case() == kInsertTimer;
}
void MattiRequest::set_has_inserttimer() {
  _oneof_case_[0] = kInsertTimer;
}
void MattiRequest::clear_inserttimer() {
  if (has_inserttimer()) {
    delete requestMessage_.inserttimer_;
    clear_has_requestMessage();
  }
}
 const ::Timer& MattiRequest::inserttimer() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertTimer)
  return has_inserttimer()
      ? *requestMessage_.inserttimer_
      : ::Timer::default_instance();
}
::Timer* MattiRequest::mutable_inserttimer() {
  if (!has_inserttimer()) {
    clear_requestMessage();
    set_has_inserttimer();
    requestMessage_.inserttimer_ = new ::Timer;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertTimer)
  return requestMessage_.inserttimer_;
}
::Timer* MattiRequest::release_inserttimer() {
  if (has_inserttimer()) {
    clear_has_requestMessage();
    ::Timer* temp = requestMessage_.inserttimer_;
    requestMessage_.inserttimer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiRequest::set_allocated_inserttimer(::Timer* inserttimer) {
  clear_requestMessage();
  if (inserttimer) {
    set_has_inserttimer();
    requestMessage_.inserttimer_ = inserttimer;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertTimer)
}

// optional .Program insertProgram = 8;
bool MattiRequest::has_insertprogram() const {
  return requestMessage_case() == kInsertProgram;
}
void MattiRequest::set_has_insertprogram() {
  _oneof_case_[0] = kInsertProgram;
}
void MattiRequest::clear_insertprogram() {
  if (has_insertprogram()) {
    delete requestMessage_.insertprogram_;
    clear_has_requestMessage();
  }
}
 const ::Program& MattiRequest::insertprogram() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertProgram)
  return has_insertprogram()
      ? *requestMessage_.insertprogram_
      : ::Program::default_instance();
}
::Program* MattiRequest::mutable_insertprogram() {
  if (!has_insertprogram()) {
    clear_requestMessage();
    set_has_insertprogram();
    requestMessage_.insertprogram_ = new ::Program;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertProgram)
  return requestMessage_.insertprogram_;
}
::Program* MattiRequest::release_insertprogram() {
  if (has_insertprogram()) {
    clear_has_requestMessage();
    ::Program* temp = requestMessage_.insertprogram_;
    requestMessage_.insertprogram_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiRequest::set_allocated_insertprogram(::Program* insertprogram) {
  clear_requestMessage();
  if (insertprogram) {
    set_has_insertprogram();
    requestMessage_.insertprogram_ = insertprogram;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertProgram)
}

// optional uint32 removeVideoConnection = 9;
bool MattiRequest::has_removevideoconnection() const {
  return requestMessage_case() == kRemoveVideoConnection;
}
void MattiRequest::set_has_removevideoconnection() {
  _oneof_case_[0] = kRemoveVideoConnection;
}
void MattiRequest::clear_removevideoconnection() {
  if (has_removevideoconnection()) {
    requestMessage_.removevideoconnection_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::removevideoconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeVideoConnection)
  if (has_removevideoconnection()) {
    return requestMessage_.removevideoconnection_;
  }
  return 0u;
}
 void MattiRequest::set_removevideoconnection(::google::protobuf::uint32 value) {
  if (!has_removevideoconnection()) {
    clear_requestMessage();
    set_has_removevideoconnection();
  }
  requestMessage_.removevideoconnection_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeVideoConnection)
}

// optional uint32 removeKwmConnection = 10;
bool MattiRequest::has_removekwmconnection() const {
  return requestMessage_case() == kRemoveKwmConnection;
}
void MattiRequest::set_has_removekwmconnection() {
  _oneof_case_[0] = kRemoveKwmConnection;
}
void MattiRequest::clear_removekwmconnection() {
  if (has_removekwmconnection()) {
    requestMessage_.removekwmconnection_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::removekwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeKwmConnection)
  if (has_removekwmconnection()) {
    return requestMessage_.removekwmconnection_;
  }
  return 0u;
}
 void MattiRequest::set_removekwmconnection(::google::protobuf::uint32 value) {
  if (!has_removekwmconnection()) {
    clear_requestMessage();
    set_has_removekwmconnection();
  }
  requestMessage_.removekwmconnection_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeKwmConnection)
}

// optional uint32 removeMatrix = 11;
bool MattiRequest::has_removematrix() const {
  return requestMessage_case() == kRemoveMatrix;
}
void MattiRequest::set_has_removematrix() {
  _oneof_case_[0] = kRemoveMatrix;
}
void MattiRequest::clear_removematrix() {
  if (has_removematrix()) {
    requestMessage_.removematrix_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::removematrix() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeMatrix)
  if (has_removematrix()) {
    return requestMessage_.removematrix_;
  }
  return 0u;
}
 void MattiRequest::set_removematrix(::google::protobuf::uint32 value) {
  if (!has_removematrix()) {
    clear_requestMessage();
    set_has_removematrix();
  }
  requestMessage_.removematrix_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeMatrix)
}

// optional uint32 removeTimer = 12;
bool MattiRequest::has_removetimer() const {
  return requestMessage_case() == kRemoveTimer;
}
void MattiRequest::set_has_removetimer() {
  _oneof_case_[0] = kRemoveTimer;
}
void MattiRequest::clear_removetimer() {
  if (has_removetimer()) {
    requestMessage_.removetimer_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::removetimer() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeTimer)
  if (has_removetimer()) {
    return requestMessage_.removetimer_;
  }
  return 0u;
}
 void MattiRequest::set_removetimer(::google::protobuf::uint32 value) {
  if (!has_removetimer()) {
    clear_requestMessage();
    set_has_removetimer();
  }
  requestMessage_.removetimer_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeTimer)
}

// optional uint32 removeProgram = 13;
bool MattiRequest::has_removeprogram() const {
  return requestMessage_case() == kRemoveProgram;
}
void MattiRequest::set_has_removeprogram() {
  _oneof_case_[0] = kRemoveProgram;
}
void MattiRequest::clear_removeprogram() {
  if (has_removeprogram()) {
    requestMessage_.removeprogram_ = 0u;
    clear_has_requestMessage();
  }
}
 ::google::protobuf::uint32 MattiRequest::removeprogram() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeProgram)
  if (has_removeprogram()) {
    return requestMessage_.removeprogram_;
  }
  return 0u;
}
 void MattiRequest::set_removeprogram(::google::protobuf::uint32 value) {
  if (!has_removeprogram()) {
    clear_requestMessage();
    set_has_removeprogram();
  }
  requestMessage_.removeprogram_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeProgram)
}

bool MattiRequest::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
void MattiRequest::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
MattiRequest::RequestMessageCase MattiRequest::requestMessage_case() const {
  return MattiRequest::RequestMessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
