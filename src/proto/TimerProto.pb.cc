// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimerProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TimerProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TimerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TimerProto_2eproto() {
  protobuf_AddDesc_TimerProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TimerProto.proto");
  GOOGLE_CHECK(file != NULL);
  TimerProto_descriptor_ = file->message_type(0);
  static const int TimerProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, programid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, repeatinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, repeattimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, starttime_),
  };
  TimerProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimerProto_descriptor_,
      TimerProto::default_instance_,
      TimerProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimerProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerProto, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TimerProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimerProto_descriptor_, &TimerProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TimerProto_2eproto() {
  delete TimerProto::default_instance_;
  delete TimerProto_reflection_;
}

void protobuf_AddDesc_TimerProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProgramProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TimerProto.proto\032\022ProgramProto.proto\"\213"
    "\001\n\nTimerProto\022\n\n\002id\030\001 \001(\r\022\021\n\tprogramId\030\002"
    " \001(\r\022\036\n\007program\030\003 \001(\0132\r.ProgramProto\022\026\n\016"
    "repeatInterval\030\004 \001(\004\022\023\n\013repeatTimes\030\005 \001("
    "\r\022\021\n\tstartTime\030\006 \001(\004b\006proto3", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TimerProto.proto", &protobuf_RegisterTypes);
  TimerProto::default_instance_ = new TimerProto();
  TimerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TimerProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TimerProto_2eproto {
  StaticDescriptorInitializer_TimerProto_2eproto() {
    protobuf_AddDesc_TimerProto_2eproto();
  }
} static_descriptor_initializer_TimerProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimerProto::kIdFieldNumber;
const int TimerProto::kProgramIdFieldNumber;
const int TimerProto::kProgramFieldNumber;
const int TimerProto::kRepeatIntervalFieldNumber;
const int TimerProto::kRepeatTimesFieldNumber;
const int TimerProto::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimerProto::TimerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimerProto)
}

void TimerProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  program_ = const_cast< ::ProgramProto*>(&::ProgramProto::default_instance());
}

TimerProto::TimerProto(const TimerProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimerProto)
}

void TimerProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  programid_ = 0u;
  program_ = NULL;
  repeatinterval_ = GOOGLE_ULONGLONG(0);
  repeattimes_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
}

TimerProto::~TimerProto() {
  // @@protoc_insertion_point(destructor:TimerProto)
  SharedDtor();
}

void TimerProto::SharedDtor() {
  if (this != default_instance_) {
    delete program_;
  }
}

void TimerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerProto_descriptor_;
}

const TimerProto& TimerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TimerProto_2eproto();
  return *default_instance_;
}

TimerProto* TimerProto::default_instance_ = NULL;

TimerProto* TimerProto::New(::google::protobuf::Arena* arena) const {
  TimerProto* n = new TimerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimerProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimerProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, programid_);
  ZR_(repeatinterval_, repeattimes_);
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TimerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TimerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_programId;
        break;
      }

      // optional uint32 programId = 2;
      case 2: {
        if (tag == 16) {
         parse_programId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &programid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_program;
        break;
      }

      // optional .ProgramProto program = 3;
      case 3: {
        if (tag == 26) {
         parse_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_program()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_repeatInterval;
        break;
      }

      // optional uint64 repeatInterval = 4;
      case 4: {
        if (tag == 32) {
         parse_repeatInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &repeatinterval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_repeatTimes;
        break;
      }

      // optional uint32 repeatTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_repeatTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeattimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 6;
      case 6: {
        if (tag == 48) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimerProto)
  return false;
#undef DO_
}

void TimerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimerProto)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 programId = 2;
  if (this->programid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->programid(), output);
  }

  // optional .ProgramProto program = 3;
  if (this->has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->program_, output);
  }

  // optional uint64 repeatInterval = 4;
  if (this->repeatinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->repeatinterval(), output);
  }

  // optional uint32 repeatTimes = 5;
  if (this->repeattimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->repeattimes(), output);
  }

  // optional uint64 startTime = 6;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:TimerProto)
}

::google::protobuf::uint8* TimerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimerProto)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 programId = 2;
  if (this->programid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->programid(), target);
  }

  // optional .ProgramProto program = 3;
  if (this->has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->program_, target);
  }

  // optional uint64 repeatInterval = 4;
  if (this->repeatinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->repeatinterval(), target);
  }

  // optional uint32 repeatTimes = 5;
  if (this->repeattimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->repeattimes(), target);
  }

  // optional uint64 startTime = 6;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TimerProto)
  return target;
}

int TimerProto::ByteSize() const {
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 programId = 2;
  if (this->programid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->programid());
  }

  // optional .ProgramProto program = 3;
  if (this->has_program()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->program_);
  }

  // optional uint64 repeatInterval = 4;
  if (this->repeatinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->repeatinterval());
  }

  // optional uint32 repeatTimes = 5;
  if (this->repeattimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->repeattimes());
  }

  // optional uint64 startTime = 6;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->starttime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimerProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimerProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerProto::MergeFrom(const TimerProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.programid() != 0) {
    set_programid(from.programid());
  }
  if (from.has_program()) {
    mutable_program()->::ProgramProto::MergeFrom(from.program());
  }
  if (from.repeatinterval() != 0) {
    set_repeatinterval(from.repeatinterval());
  }
  if (from.repeattimes() != 0) {
    set_repeattimes(from.repeattimes());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
}

void TimerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerProto::CopyFrom(const TimerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerProto::IsInitialized() const {

  return true;
}

void TimerProto::Swap(TimerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimerProto::InternalSwap(TimerProto* other) {
  std::swap(id_, other->id_);
  std::swap(programid_, other->programid_);
  std::swap(program_, other->program_);
  std::swap(repeatinterval_, other->repeatinterval_);
  std::swap(repeattimes_, other->repeattimes_);
  std::swap(starttime_, other->starttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerProto_descriptor_;
  metadata.reflection = TimerProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimerProto

// optional uint32 id = 1;
void TimerProto::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 TimerProto::id() const {
  // @@protoc_insertion_point(field_get:TimerProto.id)
  return id_;
}
 void TimerProto::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TimerProto.id)
}

// optional uint32 programId = 2;
void TimerProto::clear_programid() {
  programid_ = 0u;
}
 ::google::protobuf::uint32 TimerProto::programid() const {
  // @@protoc_insertion_point(field_get:TimerProto.programId)
  return programid_;
}
 void TimerProto::set_programid(::google::protobuf::uint32 value) {
  
  programid_ = value;
  // @@protoc_insertion_point(field_set:TimerProto.programId)
}

// optional .ProgramProto program = 3;
bool TimerProto::has_program() const {
  return !_is_default_instance_ && program_ != NULL;
}
void TimerProto::clear_program() {
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;
}
const ::ProgramProto& TimerProto::program() const {
  // @@protoc_insertion_point(field_get:TimerProto.program)
  return program_ != NULL ? *program_ : *default_instance_->program_;
}
::ProgramProto* TimerProto::mutable_program() {
  
  if (program_ == NULL) {
    program_ = new ::ProgramProto;
  }
  // @@protoc_insertion_point(field_mutable:TimerProto.program)
  return program_;
}
::ProgramProto* TimerProto::release_program() {
  
  ::ProgramProto* temp = program_;
  program_ = NULL;
  return temp;
}
void TimerProto::set_allocated_program(::ProgramProto* program) {
  delete program_;
  program_ = program;
  if (program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TimerProto.program)
}

// optional uint64 repeatInterval = 4;
void TimerProto::clear_repeatinterval() {
  repeatinterval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimerProto::repeatinterval() const {
  // @@protoc_insertion_point(field_get:TimerProto.repeatInterval)
  return repeatinterval_;
}
 void TimerProto::set_repeatinterval(::google::protobuf::uint64 value) {
  
  repeatinterval_ = value;
  // @@protoc_insertion_point(field_set:TimerProto.repeatInterval)
}

// optional uint32 repeatTimes = 5;
void TimerProto::clear_repeattimes() {
  repeattimes_ = 0u;
}
 ::google::protobuf::uint32 TimerProto::repeattimes() const {
  // @@protoc_insertion_point(field_get:TimerProto.repeatTimes)
  return repeattimes_;
}
 void TimerProto::set_repeattimes(::google::protobuf::uint32 value) {
  
  repeattimes_ = value;
  // @@protoc_insertion_point(field_set:TimerProto.repeatTimes)
}

// optional uint64 startTime = 6;
void TimerProto::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimerProto::starttime() const {
  // @@protoc_insertion_point(field_get:TimerProto.startTime)
  return starttime_;
}
 void TimerProto::set_starttime(::google::protobuf::uint64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:TimerProto.startTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
