// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MattiResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MattiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MattiResponse_reflection_ = NULL;
struct MattiResponseOneofInstance {
  const ::VideoConnection* videoconnection_;
  const ::KwmConnection* kwmconnection_;
  const ::MatrixProto* matrix_;
  const ::Timer* timer_;
  const ::Program* program_;
  const ::AllConnections* connections_;
  const ::Matrixs* matrixs_;
  const ::Timers* timers_;
  const ::Programs* programs_;
}* MattiResponse_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_MattiResponse_2eproto() {
  protobuf_AddDesc_MattiResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MattiResponse.proto");
  GOOGLE_CHECK(file != NULL);
  MattiResponse_descriptor_ = file->message_type(0);
  static const int MattiResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, ticket_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, videoconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, kwmconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, matrix_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, timer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, program_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, connections_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, matrixs_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, timers_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, programs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, requestMessage_),
  };
  MattiResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MattiResponse_descriptor_,
      MattiResponse::default_instance_,
      MattiResponse_offsets_,
      -1,
      -1,
      -1,
      MattiResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, _oneof_case_[0]),
      sizeof(MattiResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MattiResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MattiResponse_descriptor_, &MattiResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MattiResponse_2eproto() {
  delete MattiResponse::default_instance_;
  delete MattiResponse_default_oneof_instance_;
  delete MattiResponse_reflection_;
}

void protobuf_AddDesc_MattiResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_VideoConnection_2eproto();
  ::protobuf_AddDesc_KwmConnection_2eproto();
  ::protobuf_AddDesc_Matrix_2eproto();
  ::protobuf_AddDesc_Program_2eproto();
  ::protobuf_AddDesc_Timer_2eproto();
  ::protobuf_AddDesc_AllConnections_2eproto();
  ::protobuf_AddDesc_Matrixs_2eproto();
  ::protobuf_AddDesc_Programs_2eproto();
  ::protobuf_AddDesc_Timers_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MattiResponse.proto\032\025VideoConnection.p"
    "roto\032\023KwmConnection.proto\032\014Matrix.proto\032"
    "\rProgram.proto\032\013Timer.proto\032\024AllConnecti"
    "ons.proto\032\rMatrixs.proto\032\016Programs.proto"
    "\032\014Timers.proto\"\334\002\n\rMattiResponse\022\016\n\006tick"
    "et\030\001 \001(\r\022+\n\017videoConnection\030\002 \001(\0132\020.Vide"
    "oConnectionH\000\022\'\n\rkwmConnection\030\003 \001(\0132\016.K"
    "wmConnectionH\000\022\036\n\006matrix\030\004 \001(\0132\014.MatrixP"
    "rotoH\000\022\027\n\005timer\030\005 \001(\0132\006.TimerH\000\022\033\n\007progr"
    "am\030\006 \001(\0132\010.ProgramH\000\022&\n\013connections\030\007 \001("
    "\0132\017.AllConnectionsH\000\022\033\n\007matrixs\030\010 \001(\0132\010."
    "MatrixsH\000\022\031\n\006timers\030\t \001(\0132\007.TimersH\000\022\035\n\010"
    "programs\030\n \001(\0132\t.ProgramsH\000B\020\n\016requestMe"
    "ssageb\006proto3", 533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MattiResponse.proto", &protobuf_RegisterTypes);
  MattiResponse::default_instance_ = new MattiResponse();
  MattiResponse_default_oneof_instance_ = new MattiResponseOneofInstance();
  MattiResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MattiResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MattiResponse_2eproto {
  StaticDescriptorInitializer_MattiResponse_2eproto() {
    protobuf_AddDesc_MattiResponse_2eproto();
  }
} static_descriptor_initializer_MattiResponse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MattiResponse::kTicketFieldNumber;
const int MattiResponse::kVideoConnectionFieldNumber;
const int MattiResponse::kKwmConnectionFieldNumber;
const int MattiResponse::kMatrixFieldNumber;
const int MattiResponse::kTimerFieldNumber;
const int MattiResponse::kProgramFieldNumber;
const int MattiResponse::kConnectionsFieldNumber;
const int MattiResponse::kMatrixsFieldNumber;
const int MattiResponse::kTimersFieldNumber;
const int MattiResponse::kProgramsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MattiResponse::MattiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MattiResponse)
}

void MattiResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MattiResponse_default_oneof_instance_->videoconnection_ = const_cast< ::VideoConnection*>(&::VideoConnection::default_instance());
  MattiResponse_default_oneof_instance_->kwmconnection_ = const_cast< ::KwmConnection*>(&::KwmConnection::default_instance());
  MattiResponse_default_oneof_instance_->matrix_ = const_cast< ::MatrixProto*>(&::MatrixProto::default_instance());
  MattiResponse_default_oneof_instance_->timer_ = const_cast< ::Timer*>(&::Timer::default_instance());
  MattiResponse_default_oneof_instance_->program_ = const_cast< ::Program*>(&::Program::default_instance());
  MattiResponse_default_oneof_instance_->connections_ = const_cast< ::AllConnections*>(&::AllConnections::default_instance());
  MattiResponse_default_oneof_instance_->matrixs_ = const_cast< ::Matrixs*>(&::Matrixs::default_instance());
  MattiResponse_default_oneof_instance_->timers_ = const_cast< ::Timers*>(&::Timers::default_instance());
  MattiResponse_default_oneof_instance_->programs_ = const_cast< ::Programs*>(&::Programs::default_instance());
}

MattiResponse::MattiResponse(const MattiResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MattiResponse)
}

void MattiResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ticket_ = 0u;
  clear_has_requestMessage();
}

MattiResponse::~MattiResponse() {
  // @@protoc_insertion_point(destructor:MattiResponse)
  SharedDtor();
}

void MattiResponse::SharedDtor() {
  if (has_requestMessage()) {
    clear_requestMessage();
  }
  if (this != default_instance_) {
  }
}

void MattiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MattiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MattiResponse_descriptor_;
}

const MattiResponse& MattiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MattiResponse_2eproto();
  return *default_instance_;
}

MattiResponse* MattiResponse::default_instance_ = NULL;

MattiResponse* MattiResponse::New(::google::protobuf::Arena* arena) const {
  MattiResponse* n = new MattiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MattiResponse::clear_requestMessage() {
  switch(requestMessage_case()) {
    case kVideoConnection: {
      delete requestMessage_.videoconnection_;
      break;
    }
    case kKwmConnection: {
      delete requestMessage_.kwmconnection_;
      break;
    }
    case kMatrix: {
      delete requestMessage_.matrix_;
      break;
    }
    case kTimer: {
      delete requestMessage_.timer_;
      break;
    }
    case kProgram: {
      delete requestMessage_.program_;
      break;
    }
    case kConnections: {
      delete requestMessage_.connections_;
      break;
    }
    case kMatrixs: {
      delete requestMessage_.matrixs_;
      break;
    }
    case kTimers: {
      delete requestMessage_.timers_;
      break;
    }
    case kPrograms: {
      delete requestMessage_.programs_;
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}


void MattiResponse::Clear() {
  ticket_ = 0u;
  clear_requestMessage();
}

bool MattiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MattiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_videoConnection;
        break;
      }

      // optional .VideoConnection videoConnection = 2;
      case 2: {
        if (tag == 18) {
         parse_videoConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_kwmConnection;
        break;
      }

      // optional .KwmConnection kwmConnection = 3;
      case 3: {
        if (tag == 26) {
         parse_kwmConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kwmconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matrix;
        break;
      }

      // optional .MatrixProto matrix = 4;
      case 4: {
        if (tag == 34) {
         parse_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_timer;
        break;
      }

      // optional .Timer timer = 5;
      case 5: {
        if (tag == 42) {
         parse_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_program;
        break;
      }

      // optional .Program program = 6;
      case 6: {
        if (tag == 50) {
         parse_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_program()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_connections;
        break;
      }

      // optional .AllConnections connections = 7;
      case 7: {
        if (tag == 58) {
         parse_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_matrixs;
        break;
      }

      // optional .Matrixs matrixs = 8;
      case 8: {
        if (tag == 66) {
         parse_matrixs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrixs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_timers;
        break;
      }

      // optional .Timers timers = 9;
      case 9: {
        if (tag == 74) {
         parse_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_programs;
        break;
      }

      // optional .Programs programs = 10;
      case 10: {
        if (tag == 82) {
         parse_programs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_programs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MattiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MattiResponse)
  return false;
#undef DO_
}

void MattiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MattiResponse)
  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticket(), output);
  }

  // optional .VideoConnection videoConnection = 2;
  if (has_videoconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *requestMessage_.videoconnection_, output);
  }

  // optional .KwmConnection kwmConnection = 3;
  if (has_kwmconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *requestMessage_.kwmconnection_, output);
  }

  // optional .MatrixProto matrix = 4;
  if (has_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *requestMessage_.matrix_, output);
  }

  // optional .Timer timer = 5;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *requestMessage_.timer_, output);
  }

  // optional .Program program = 6;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *requestMessage_.program_, output);
  }

  // optional .AllConnections connections = 7;
  if (has_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *requestMessage_.connections_, output);
  }

  // optional .Matrixs matrixs = 8;
  if (has_matrixs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *requestMessage_.matrixs_, output);
  }

  // optional .Timers timers = 9;
  if (has_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *requestMessage_.timers_, output);
  }

  // optional .Programs programs = 10;
  if (has_programs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *requestMessage_.programs_, output);
  }

  // @@protoc_insertion_point(serialize_end:MattiResponse)
}

::google::protobuf::uint8* MattiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MattiResponse)
  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticket(), target);
  }

  // optional .VideoConnection videoConnection = 2;
  if (has_videoconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *requestMessage_.videoconnection_, target);
  }

  // optional .KwmConnection kwmConnection = 3;
  if (has_kwmconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *requestMessage_.kwmconnection_, target);
  }

  // optional .MatrixProto matrix = 4;
  if (has_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *requestMessage_.matrix_, target);
  }

  // optional .Timer timer = 5;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *requestMessage_.timer_, target);
  }

  // optional .Program program = 6;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *requestMessage_.program_, target);
  }

  // optional .AllConnections connections = 7;
  if (has_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *requestMessage_.connections_, target);
  }

  // optional .Matrixs matrixs = 8;
  if (has_matrixs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *requestMessage_.matrixs_, target);
  }

  // optional .Timers timers = 9;
  if (has_timers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *requestMessage_.timers_, target);
  }

  // optional .Programs programs = 10;
  if (has_programs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *requestMessage_.programs_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MattiResponse)
  return target;
}

int MattiResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ticket());
  }

  switch (requestMessage_case()) {
    // optional .VideoConnection videoConnection = 2;
    case kVideoConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.videoconnection_);
      break;
    }
    // optional .KwmConnection kwmConnection = 3;
    case kKwmConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.kwmconnection_);
      break;
    }
    // optional .MatrixProto matrix = 4;
    case kMatrix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.matrix_);
      break;
    }
    // optional .Timer timer = 5;
    case kTimer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.timer_);
      break;
    }
    // optional .Program program = 6;
    case kProgram: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.program_);
      break;
    }
    // optional .AllConnections connections = 7;
    case kConnections: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.connections_);
      break;
    }
    // optional .Matrixs matrixs = 8;
    case kMatrixs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.matrixs_);
      break;
    }
    // optional .Timers timers = 9;
    case kTimers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.timers_);
      break;
    }
    // optional .Programs programs = 10;
    case kPrograms: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.programs_);
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MattiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MattiResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MattiResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MattiResponse::MergeFrom(const MattiResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.requestMessage_case()) {
    case kVideoConnection: {
      mutable_videoconnection()->::VideoConnection::MergeFrom(from.videoconnection());
      break;
    }
    case kKwmConnection: {
      mutable_kwmconnection()->::KwmConnection::MergeFrom(from.kwmconnection());
      break;
    }
    case kMatrix: {
      mutable_matrix()->::MatrixProto::MergeFrom(from.matrix());
      break;
    }
    case kTimer: {
      mutable_timer()->::Timer::MergeFrom(from.timer());
      break;
    }
    case kProgram: {
      mutable_program()->::Program::MergeFrom(from.program());
      break;
    }
    case kConnections: {
      mutable_connections()->::AllConnections::MergeFrom(from.connections());
      break;
    }
    case kMatrixs: {
      mutable_matrixs()->::Matrixs::MergeFrom(from.matrixs());
      break;
    }
    case kTimers: {
      mutable_timers()->::Timers::MergeFrom(from.timers());
      break;
    }
    case kPrograms: {
      mutable_programs()->::Programs::MergeFrom(from.programs());
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void MattiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MattiResponse::CopyFrom(const MattiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MattiResponse::IsInitialized() const {

  return true;
}

void MattiResponse::Swap(MattiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MattiResponse::InternalSwap(MattiResponse* other) {
  std::swap(ticket_, other->ticket_);
  std::swap(requestMessage_, other->requestMessage_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MattiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MattiResponse_descriptor_;
  metadata.reflection = MattiResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiResponse

// optional uint32 ticket = 1;
void MattiResponse::clear_ticket() {
  ticket_ = 0u;
}
 ::google::protobuf::uint32 MattiResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MattiResponse.ticket)
  return ticket_;
}
 void MattiResponse::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiResponse.ticket)
}

// optional .VideoConnection videoConnection = 2;
bool MattiResponse::has_videoconnection() const {
  return requestMessage_case() == kVideoConnection;
}
void MattiResponse::set_has_videoconnection() {
  _oneof_case_[0] = kVideoConnection;
}
void MattiResponse::clear_videoconnection() {
  if (has_videoconnection()) {
    delete requestMessage_.videoconnection_;
    clear_has_requestMessage();
  }
}
 const ::VideoConnection& MattiResponse::videoconnection() const {
  // @@protoc_insertion_point(field_get:MattiResponse.videoConnection)
  return has_videoconnection()
      ? *requestMessage_.videoconnection_
      : ::VideoConnection::default_instance();
}
::VideoConnection* MattiResponse::mutable_videoconnection() {
  if (!has_videoconnection()) {
    clear_requestMessage();
    set_has_videoconnection();
    requestMessage_.videoconnection_ = new ::VideoConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.videoConnection)
  return requestMessage_.videoconnection_;
}
::VideoConnection* MattiResponse::release_videoconnection() {
  if (has_videoconnection()) {
    clear_has_requestMessage();
    ::VideoConnection* temp = requestMessage_.videoconnection_;
    requestMessage_.videoconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_videoconnection(::VideoConnection* videoconnection) {
  clear_requestMessage();
  if (videoconnection) {
    set_has_videoconnection();
    requestMessage_.videoconnection_ = videoconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.videoConnection)
}

// optional .KwmConnection kwmConnection = 3;
bool MattiResponse::has_kwmconnection() const {
  return requestMessage_case() == kKwmConnection;
}
void MattiResponse::set_has_kwmconnection() {
  _oneof_case_[0] = kKwmConnection;
}
void MattiResponse::clear_kwmconnection() {
  if (has_kwmconnection()) {
    delete requestMessage_.kwmconnection_;
    clear_has_requestMessage();
  }
}
 const ::KwmConnection& MattiResponse::kwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiResponse.kwmConnection)
  return has_kwmconnection()
      ? *requestMessage_.kwmconnection_
      : ::KwmConnection::default_instance();
}
::KwmConnection* MattiResponse::mutable_kwmconnection() {
  if (!has_kwmconnection()) {
    clear_requestMessage();
    set_has_kwmconnection();
    requestMessage_.kwmconnection_ = new ::KwmConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.kwmConnection)
  return requestMessage_.kwmconnection_;
}
::KwmConnection* MattiResponse::release_kwmconnection() {
  if (has_kwmconnection()) {
    clear_has_requestMessage();
    ::KwmConnection* temp = requestMessage_.kwmconnection_;
    requestMessage_.kwmconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_kwmconnection(::KwmConnection* kwmconnection) {
  clear_requestMessage();
  if (kwmconnection) {
    set_has_kwmconnection();
    requestMessage_.kwmconnection_ = kwmconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.kwmConnection)
}

// optional .MatrixProto matrix = 4;
bool MattiResponse::has_matrix() const {
  return requestMessage_case() == kMatrix;
}
void MattiResponse::set_has_matrix() {
  _oneof_case_[0] = kMatrix;
}
void MattiResponse::clear_matrix() {
  if (has_matrix()) {
    delete requestMessage_.matrix_;
    clear_has_requestMessage();
  }
}
 const ::MatrixProto& MattiResponse::matrix() const {
  // @@protoc_insertion_point(field_get:MattiResponse.matrix)
  return has_matrix()
      ? *requestMessage_.matrix_
      : ::MatrixProto::default_instance();
}
::MatrixProto* MattiResponse::mutable_matrix() {
  if (!has_matrix()) {
    clear_requestMessage();
    set_has_matrix();
    requestMessage_.matrix_ = new ::MatrixProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.matrix)
  return requestMessage_.matrix_;
}
::MatrixProto* MattiResponse::release_matrix() {
  if (has_matrix()) {
    clear_has_requestMessage();
    ::MatrixProto* temp = requestMessage_.matrix_;
    requestMessage_.matrix_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_matrix(::MatrixProto* matrix) {
  clear_requestMessage();
  if (matrix) {
    set_has_matrix();
    requestMessage_.matrix_ = matrix;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.matrix)
}

// optional .Timer timer = 5;
bool MattiResponse::has_timer() const {
  return requestMessage_case() == kTimer;
}
void MattiResponse::set_has_timer() {
  _oneof_case_[0] = kTimer;
}
void MattiResponse::clear_timer() {
  if (has_timer()) {
    delete requestMessage_.timer_;
    clear_has_requestMessage();
  }
}
 const ::Timer& MattiResponse::timer() const {
  // @@protoc_insertion_point(field_get:MattiResponse.timer)
  return has_timer()
      ? *requestMessage_.timer_
      : ::Timer::default_instance();
}
::Timer* MattiResponse::mutable_timer() {
  if (!has_timer()) {
    clear_requestMessage();
    set_has_timer();
    requestMessage_.timer_ = new ::Timer;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.timer)
  return requestMessage_.timer_;
}
::Timer* MattiResponse::release_timer() {
  if (has_timer()) {
    clear_has_requestMessage();
    ::Timer* temp = requestMessage_.timer_;
    requestMessage_.timer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_timer(::Timer* timer) {
  clear_requestMessage();
  if (timer) {
    set_has_timer();
    requestMessage_.timer_ = timer;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.timer)
}

// optional .Program program = 6;
bool MattiResponse::has_program() const {
  return requestMessage_case() == kProgram;
}
void MattiResponse::set_has_program() {
  _oneof_case_[0] = kProgram;
}
void MattiResponse::clear_program() {
  if (has_program()) {
    delete requestMessage_.program_;
    clear_has_requestMessage();
  }
}
 const ::Program& MattiResponse::program() const {
  // @@protoc_insertion_point(field_get:MattiResponse.program)
  return has_program()
      ? *requestMessage_.program_
      : ::Program::default_instance();
}
::Program* MattiResponse::mutable_program() {
  if (!has_program()) {
    clear_requestMessage();
    set_has_program();
    requestMessage_.program_ = new ::Program;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.program)
  return requestMessage_.program_;
}
::Program* MattiResponse::release_program() {
  if (has_program()) {
    clear_has_requestMessage();
    ::Program* temp = requestMessage_.program_;
    requestMessage_.program_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_program(::Program* program) {
  clear_requestMessage();
  if (program) {
    set_has_program();
    requestMessage_.program_ = program;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.program)
}

// optional .AllConnections connections = 7;
bool MattiResponse::has_connections() const {
  return requestMessage_case() == kConnections;
}
void MattiResponse::set_has_connections() {
  _oneof_case_[0] = kConnections;
}
void MattiResponse::clear_connections() {
  if (has_connections()) {
    delete requestMessage_.connections_;
    clear_has_requestMessage();
  }
}
 const ::AllConnections& MattiResponse::connections() const {
  // @@protoc_insertion_point(field_get:MattiResponse.connections)
  return has_connections()
      ? *requestMessage_.connections_
      : ::AllConnections::default_instance();
}
::AllConnections* MattiResponse::mutable_connections() {
  if (!has_connections()) {
    clear_requestMessage();
    set_has_connections();
    requestMessage_.connections_ = new ::AllConnections;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.connections)
  return requestMessage_.connections_;
}
::AllConnections* MattiResponse::release_connections() {
  if (has_connections()) {
    clear_has_requestMessage();
    ::AllConnections* temp = requestMessage_.connections_;
    requestMessage_.connections_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_connections(::AllConnections* connections) {
  clear_requestMessage();
  if (connections) {
    set_has_connections();
    requestMessage_.connections_ = connections;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.connections)
}

// optional .Matrixs matrixs = 8;
bool MattiResponse::has_matrixs() const {
  return requestMessage_case() == kMatrixs;
}
void MattiResponse::set_has_matrixs() {
  _oneof_case_[0] = kMatrixs;
}
void MattiResponse::clear_matrixs() {
  if (has_matrixs()) {
    delete requestMessage_.matrixs_;
    clear_has_requestMessage();
  }
}
 const ::Matrixs& MattiResponse::matrixs() const {
  // @@protoc_insertion_point(field_get:MattiResponse.matrixs)
  return has_matrixs()
      ? *requestMessage_.matrixs_
      : ::Matrixs::default_instance();
}
::Matrixs* MattiResponse::mutable_matrixs() {
  if (!has_matrixs()) {
    clear_requestMessage();
    set_has_matrixs();
    requestMessage_.matrixs_ = new ::Matrixs;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.matrixs)
  return requestMessage_.matrixs_;
}
::Matrixs* MattiResponse::release_matrixs() {
  if (has_matrixs()) {
    clear_has_requestMessage();
    ::Matrixs* temp = requestMessage_.matrixs_;
    requestMessage_.matrixs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_matrixs(::Matrixs* matrixs) {
  clear_requestMessage();
  if (matrixs) {
    set_has_matrixs();
    requestMessage_.matrixs_ = matrixs;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.matrixs)
}

// optional .Timers timers = 9;
bool MattiResponse::has_timers() const {
  return requestMessage_case() == kTimers;
}
void MattiResponse::set_has_timers() {
  _oneof_case_[0] = kTimers;
}
void MattiResponse::clear_timers() {
  if (has_timers()) {
    delete requestMessage_.timers_;
    clear_has_requestMessage();
  }
}
 const ::Timers& MattiResponse::timers() const {
  // @@protoc_insertion_point(field_get:MattiResponse.timers)
  return has_timers()
      ? *requestMessage_.timers_
      : ::Timers::default_instance();
}
::Timers* MattiResponse::mutable_timers() {
  if (!has_timers()) {
    clear_requestMessage();
    set_has_timers();
    requestMessage_.timers_ = new ::Timers;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.timers)
  return requestMessage_.timers_;
}
::Timers* MattiResponse::release_timers() {
  if (has_timers()) {
    clear_has_requestMessage();
    ::Timers* temp = requestMessage_.timers_;
    requestMessage_.timers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_timers(::Timers* timers) {
  clear_requestMessage();
  if (timers) {
    set_has_timers();
    requestMessage_.timers_ = timers;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.timers)
}

// optional .Programs programs = 10;
bool MattiResponse::has_programs() const {
  return requestMessage_case() == kPrograms;
}
void MattiResponse::set_has_programs() {
  _oneof_case_[0] = kPrograms;
}
void MattiResponse::clear_programs() {
  if (has_programs()) {
    delete requestMessage_.programs_;
    clear_has_requestMessage();
  }
}
 const ::Programs& MattiResponse::programs() const {
  // @@protoc_insertion_point(field_get:MattiResponse.programs)
  return has_programs()
      ? *requestMessage_.programs_
      : ::Programs::default_instance();
}
::Programs* MattiResponse::mutable_programs() {
  if (!has_programs()) {
    clear_requestMessage();
    set_has_programs();
    requestMessage_.programs_ = new ::Programs;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.programs)
  return requestMessage_.programs_;
}
::Programs* MattiResponse::release_programs() {
  if (has_programs()) {
    clear_has_requestMessage();
    ::Programs* temp = requestMessage_.programs_;
    requestMessage_.programs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_programs(::Programs* programs) {
  clear_requestMessage();
  if (programs) {
    set_has_programs();
    requestMessage_.programs_ = programs;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.programs)
}

bool MattiResponse::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
void MattiResponse::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
MattiResponse::RequestMessageCase MattiResponse::requestMessage_case() const {
  return MattiResponse::RequestMessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
