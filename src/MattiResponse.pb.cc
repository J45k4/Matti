// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MattiResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MattiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MattiResponse_reflection_ = NULL;
struct MattiResponseOneofInstance {
  const ::VideoConnection* videoconnection_;
  const ::KwmConnection* kwmconnection_;
  const ::VideoConnections* videoconnections_;
  const ::KwmConnections* kwmconnections_;
}* MattiResponse_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_MattiResponse_2eproto() {
  protobuf_AddDesc_MattiResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MattiResponse.proto");
  GOOGLE_CHECK(file != NULL);
  MattiResponse_descriptor_ = file->message_type(0);
  static const int MattiResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, ticket_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, videoconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, kwmconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, videoconnections_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MattiResponse_default_oneof_instance_, kwmconnections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, requestMessage_),
  };
  MattiResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MattiResponse_descriptor_,
      MattiResponse::default_instance_,
      MattiResponse_offsets_,
      -1,
      -1,
      -1,
      MattiResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, _oneof_case_[0]),
      sizeof(MattiResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MattiResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MattiResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MattiResponse_descriptor_, &MattiResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MattiResponse_2eproto() {
  delete MattiResponse::default_instance_;
  delete MattiResponse_default_oneof_instance_;
  delete MattiResponse_reflection_;
}

void protobuf_AddDesc_MattiResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_VideoConnection_2eproto();
  ::protobuf_AddDesc_KwmConnection_2eproto();
  ::protobuf_AddDesc_VideoConnections_2eproto();
  ::protobuf_AddDesc_KwmConnections_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MattiResponse.proto\032\025VideoConnection.p"
    "roto\032\023KwmConnection.proto\032\026VideoConnecti"
    "ons.proto\032\024KwmConnections.proto\"\341\001\n\rMatt"
    "iResponse\022\016\n\006ticket\030\001 \001(\r\022+\n\017videoConnec"
    "tion\030\002 \001(\0132\020.VideoConnectionH\000\022\'\n\rkwmCon"
    "nection\030\003 \001(\0132\016.KwmConnectionH\000\022-\n\020video"
    "Connections\030\004 \001(\0132\021.VideoConnectionsH\000\022)"
    "\n\016kwmConnections\030\005 \001(\0132\017.KwmConnectionsH"
    "\000B\020\n\016requestMessageb\006proto3", 347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MattiResponse.proto", &protobuf_RegisterTypes);
  MattiResponse::default_instance_ = new MattiResponse();
  MattiResponse_default_oneof_instance_ = new MattiResponseOneofInstance();
  MattiResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MattiResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MattiResponse_2eproto {
  StaticDescriptorInitializer_MattiResponse_2eproto() {
    protobuf_AddDesc_MattiResponse_2eproto();
  }
} static_descriptor_initializer_MattiResponse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MattiResponse::kTicketFieldNumber;
const int MattiResponse::kVideoConnectionFieldNumber;
const int MattiResponse::kKwmConnectionFieldNumber;
const int MattiResponse::kVideoConnectionsFieldNumber;
const int MattiResponse::kKwmConnectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MattiResponse::MattiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MattiResponse)
}

void MattiResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MattiResponse_default_oneof_instance_->videoconnection_ = const_cast< ::VideoConnection*>(&::VideoConnection::default_instance());
  MattiResponse_default_oneof_instance_->kwmconnection_ = const_cast< ::KwmConnection*>(&::KwmConnection::default_instance());
  MattiResponse_default_oneof_instance_->videoconnections_ = const_cast< ::VideoConnections*>(&::VideoConnections::default_instance());
  MattiResponse_default_oneof_instance_->kwmconnections_ = const_cast< ::KwmConnections*>(&::KwmConnections::default_instance());
}

MattiResponse::MattiResponse(const MattiResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MattiResponse)
}

void MattiResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ticket_ = 0u;
  clear_has_requestMessage();
}

MattiResponse::~MattiResponse() {
  // @@protoc_insertion_point(destructor:MattiResponse)
  SharedDtor();
}

void MattiResponse::SharedDtor() {
  if (has_requestMessage()) {
    clear_requestMessage();
  }
  if (this != default_instance_) {
  }
}

void MattiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MattiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MattiResponse_descriptor_;
}

const MattiResponse& MattiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MattiResponse_2eproto();
  return *default_instance_;
}

MattiResponse* MattiResponse::default_instance_ = NULL;

MattiResponse* MattiResponse::New(::google::protobuf::Arena* arena) const {
  MattiResponse* n = new MattiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MattiResponse::clear_requestMessage() {
  switch(requestMessage_case()) {
    case kVideoConnection: {
      delete requestMessage_.videoconnection_;
      break;
    }
    case kKwmConnection: {
      delete requestMessage_.kwmconnection_;
      break;
    }
    case kVideoConnections: {
      delete requestMessage_.videoconnections_;
      break;
    }
    case kKwmConnections: {
      delete requestMessage_.kwmconnections_;
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}


void MattiResponse::Clear() {
  ticket_ = 0u;
  clear_requestMessage();
}

bool MattiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MattiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_videoConnection;
        break;
      }

      // optional .VideoConnection videoConnection = 2;
      case 2: {
        if (tag == 18) {
         parse_videoConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_kwmConnection;
        break;
      }

      // optional .KwmConnection kwmConnection = 3;
      case 3: {
        if (tag == 26) {
         parse_kwmConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kwmconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_videoConnections;
        break;
      }

      // optional .VideoConnections videoConnections = 4;
      case 4: {
        if (tag == 34) {
         parse_videoConnections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoconnections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_kwmConnections;
        break;
      }

      // optional .KwmConnections kwmConnections = 5;
      case 5: {
        if (tag == 42) {
         parse_kwmConnections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kwmconnections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MattiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MattiResponse)
  return false;
#undef DO_
}

void MattiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MattiResponse)
  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticket(), output);
  }

  // optional .VideoConnection videoConnection = 2;
  if (has_videoconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *requestMessage_.videoconnection_, output);
  }

  // optional .KwmConnection kwmConnection = 3;
  if (has_kwmconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *requestMessage_.kwmconnection_, output);
  }

  // optional .VideoConnections videoConnections = 4;
  if (has_videoconnections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *requestMessage_.videoconnections_, output);
  }

  // optional .KwmConnections kwmConnections = 5;
  if (has_kwmconnections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *requestMessage_.kwmconnections_, output);
  }

  // @@protoc_insertion_point(serialize_end:MattiResponse)
}

::google::protobuf::uint8* MattiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MattiResponse)
  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticket(), target);
  }

  // optional .VideoConnection videoConnection = 2;
  if (has_videoconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *requestMessage_.videoconnection_, target);
  }

  // optional .KwmConnection kwmConnection = 3;
  if (has_kwmconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *requestMessage_.kwmconnection_, target);
  }

  // optional .VideoConnections videoConnections = 4;
  if (has_videoconnections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *requestMessage_.videoconnections_, target);
  }

  // optional .KwmConnections kwmConnections = 5;
  if (has_kwmconnections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *requestMessage_.kwmconnections_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MattiResponse)
  return target;
}

int MattiResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 ticket = 1;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ticket());
  }

  switch (requestMessage_case()) {
    // optional .VideoConnection videoConnection = 2;
    case kVideoConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.videoconnection_);
      break;
    }
    // optional .KwmConnection kwmConnection = 3;
    case kKwmConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.kwmconnection_);
      break;
    }
    // optional .VideoConnections videoConnections = 4;
    case kVideoConnections: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.videoconnections_);
      break;
    }
    // optional .KwmConnections kwmConnections = 5;
    case kKwmConnections: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *requestMessage_.kwmconnections_);
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MattiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MattiResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MattiResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MattiResponse::MergeFrom(const MattiResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.requestMessage_case()) {
    case kVideoConnection: {
      mutable_videoconnection()->::VideoConnection::MergeFrom(from.videoconnection());
      break;
    }
    case kKwmConnection: {
      mutable_kwmconnection()->::KwmConnection::MergeFrom(from.kwmconnection());
      break;
    }
    case kVideoConnections: {
      mutable_videoconnections()->::VideoConnections::MergeFrom(from.videoconnections());
      break;
    }
    case kKwmConnections: {
      mutable_kwmconnections()->::KwmConnections::MergeFrom(from.kwmconnections());
      break;
    }
    case REQUESTMESSAGE_NOT_SET: {
      break;
    }
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void MattiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MattiResponse::CopyFrom(const MattiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MattiResponse::IsInitialized() const {

  return true;
}

void MattiResponse::Swap(MattiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MattiResponse::InternalSwap(MattiResponse* other) {
  std::swap(ticket_, other->ticket_);
  std::swap(requestMessage_, other->requestMessage_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MattiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MattiResponse_descriptor_;
  metadata.reflection = MattiResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiResponse

// optional uint32 ticket = 1;
void MattiResponse::clear_ticket() {
  ticket_ = 0u;
}
 ::google::protobuf::uint32 MattiResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MattiResponse.ticket)
  return ticket_;
}
 void MattiResponse::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiResponse.ticket)
}

// optional .VideoConnection videoConnection = 2;
bool MattiResponse::has_videoconnection() const {
  return requestMessage_case() == kVideoConnection;
}
void MattiResponse::set_has_videoconnection() {
  _oneof_case_[0] = kVideoConnection;
}
void MattiResponse::clear_videoconnection() {
  if (has_videoconnection()) {
    delete requestMessage_.videoconnection_;
    clear_has_requestMessage();
  }
}
 const ::VideoConnection& MattiResponse::videoconnection() const {
  // @@protoc_insertion_point(field_get:MattiResponse.videoConnection)
  return has_videoconnection()
      ? *requestMessage_.videoconnection_
      : ::VideoConnection::default_instance();
}
::VideoConnection* MattiResponse::mutable_videoconnection() {
  if (!has_videoconnection()) {
    clear_requestMessage();
    set_has_videoconnection();
    requestMessage_.videoconnection_ = new ::VideoConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.videoConnection)
  return requestMessage_.videoconnection_;
}
::VideoConnection* MattiResponse::release_videoconnection() {
  if (has_videoconnection()) {
    clear_has_requestMessage();
    ::VideoConnection* temp = requestMessage_.videoconnection_;
    requestMessage_.videoconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_videoconnection(::VideoConnection* videoconnection) {
  clear_requestMessage();
  if (videoconnection) {
    set_has_videoconnection();
    requestMessage_.videoconnection_ = videoconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.videoConnection)
}

// optional .KwmConnection kwmConnection = 3;
bool MattiResponse::has_kwmconnection() const {
  return requestMessage_case() == kKwmConnection;
}
void MattiResponse::set_has_kwmconnection() {
  _oneof_case_[0] = kKwmConnection;
}
void MattiResponse::clear_kwmconnection() {
  if (has_kwmconnection()) {
    delete requestMessage_.kwmconnection_;
    clear_has_requestMessage();
  }
}
 const ::KwmConnection& MattiResponse::kwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiResponse.kwmConnection)
  return has_kwmconnection()
      ? *requestMessage_.kwmconnection_
      : ::KwmConnection::default_instance();
}
::KwmConnection* MattiResponse::mutable_kwmconnection() {
  if (!has_kwmconnection()) {
    clear_requestMessage();
    set_has_kwmconnection();
    requestMessage_.kwmconnection_ = new ::KwmConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.kwmConnection)
  return requestMessage_.kwmconnection_;
}
::KwmConnection* MattiResponse::release_kwmconnection() {
  if (has_kwmconnection()) {
    clear_has_requestMessage();
    ::KwmConnection* temp = requestMessage_.kwmconnection_;
    requestMessage_.kwmconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_kwmconnection(::KwmConnection* kwmconnection) {
  clear_requestMessage();
  if (kwmconnection) {
    set_has_kwmconnection();
    requestMessage_.kwmconnection_ = kwmconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.kwmConnection)
}

// optional .VideoConnections videoConnections = 4;
bool MattiResponse::has_videoconnections() const {
  return requestMessage_case() == kVideoConnections;
}
void MattiResponse::set_has_videoconnections() {
  _oneof_case_[0] = kVideoConnections;
}
void MattiResponse::clear_videoconnections() {
  if (has_videoconnections()) {
    delete requestMessage_.videoconnections_;
    clear_has_requestMessage();
  }
}
 const ::VideoConnections& MattiResponse::videoconnections() const {
  // @@protoc_insertion_point(field_get:MattiResponse.videoConnections)
  return has_videoconnections()
      ? *requestMessage_.videoconnections_
      : ::VideoConnections::default_instance();
}
::VideoConnections* MattiResponse::mutable_videoconnections() {
  if (!has_videoconnections()) {
    clear_requestMessage();
    set_has_videoconnections();
    requestMessage_.videoconnections_ = new ::VideoConnections;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.videoConnections)
  return requestMessage_.videoconnections_;
}
::VideoConnections* MattiResponse::release_videoconnections() {
  if (has_videoconnections()) {
    clear_has_requestMessage();
    ::VideoConnections* temp = requestMessage_.videoconnections_;
    requestMessage_.videoconnections_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_videoconnections(::VideoConnections* videoconnections) {
  clear_requestMessage();
  if (videoconnections) {
    set_has_videoconnections();
    requestMessage_.videoconnections_ = videoconnections;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.videoConnections)
}

// optional .KwmConnections kwmConnections = 5;
bool MattiResponse::has_kwmconnections() const {
  return requestMessage_case() == kKwmConnections;
}
void MattiResponse::set_has_kwmconnections() {
  _oneof_case_[0] = kKwmConnections;
}
void MattiResponse::clear_kwmconnections() {
  if (has_kwmconnections()) {
    delete requestMessage_.kwmconnections_;
    clear_has_requestMessage();
  }
}
 const ::KwmConnections& MattiResponse::kwmconnections() const {
  // @@protoc_insertion_point(field_get:MattiResponse.kwmConnections)
  return has_kwmconnections()
      ? *requestMessage_.kwmconnections_
      : ::KwmConnections::default_instance();
}
::KwmConnections* MattiResponse::mutable_kwmconnections() {
  if (!has_kwmconnections()) {
    clear_requestMessage();
    set_has_kwmconnections();
    requestMessage_.kwmconnections_ = new ::KwmConnections;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.kwmConnections)
  return requestMessage_.kwmconnections_;
}
::KwmConnections* MattiResponse::release_kwmconnections() {
  if (has_kwmconnections()) {
    clear_has_requestMessage();
    ::KwmConnections* temp = requestMessage_.kwmconnections_;
    requestMessage_.kwmconnections_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MattiResponse::set_allocated_kwmconnections(::KwmConnections* kwmconnections) {
  clear_requestMessage();
  if (kwmconnections) {
    set_has_kwmconnections();
    requestMessage_.kwmconnections_ = kwmconnections;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.kwmConnections)
}

bool MattiResponse::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
void MattiResponse::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
MattiResponse::RequestMessageCase MattiResponse::requestMessage_case() const {
  return MattiResponse::RequestMessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
