// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Timer.proto

#ifndef PROTOBUF_Timer_2eproto__INCLUDED
#define PROTOBUF_Timer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Program.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Timer_2eproto();
void protobuf_AssignDesc_Timer_2eproto();
void protobuf_ShutdownFile_Timer_2eproto();

class Timer;

// ===================================================================

class Timer : public ::google::protobuf::Message {
 public:
  Timer();
  virtual ~Timer();

  Timer(const Timer& from);

  inline Timer& operator=(const Timer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timer& default_instance();

  void Swap(Timer* other);

  // implements Message ----------------------------------------------

  inline Timer* New() const { return New(NULL); }

  Timer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timer& from);
  void MergeFrom(const Timer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 programId = 2;
  void clear_programid();
  static const int kProgramIdFieldNumber = 2;
  ::google::protobuf::uint32 programid() const;
  void set_programid(::google::protobuf::uint32 value);

  // optional .Program program = 3;
  bool has_program() const;
  void clear_program();
  static const int kProgramFieldNumber = 3;
  const ::Program& program() const;
  ::Program* mutable_program();
  ::Program* release_program();
  void set_allocated_program(::Program* program);

  // optional uint64 repeatInterval = 4;
  void clear_repeatinterval();
  static const int kRepeatIntervalFieldNumber = 4;
  ::google::protobuf::uint64 repeatinterval() const;
  void set_repeatinterval(::google::protobuf::uint64 value);

  // optional uint32 repeatTimes = 5;
  void clear_repeattimes();
  static const int kRepeatTimesFieldNumber = 5;
  ::google::protobuf::uint32 repeattimes() const;
  void set_repeattimes(::google::protobuf::uint32 value);

  // optional uint64 startTime = 6;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  ::google::protobuf::uint64 starttime() const;
  void set_starttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Timer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 programid_;
  ::Program* program_;
  ::google::protobuf::uint64 repeatinterval_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint32 repeattimes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Timer_2eproto();
  friend void protobuf_AssignDesc_Timer_2eproto();
  friend void protobuf_ShutdownFile_Timer_2eproto();

  void InitAsDefaultInstance();
  static Timer* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Timer

// optional uint32 id = 1;
inline void Timer::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Timer::id() const {
  // @@protoc_insertion_point(field_get:Timer.id)
  return id_;
}
inline void Timer::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Timer.id)
}

// optional uint32 programId = 2;
inline void Timer::clear_programid() {
  programid_ = 0u;
}
inline ::google::protobuf::uint32 Timer::programid() const {
  // @@protoc_insertion_point(field_get:Timer.programId)
  return programid_;
}
inline void Timer::set_programid(::google::protobuf::uint32 value) {
  
  programid_ = value;
  // @@protoc_insertion_point(field_set:Timer.programId)
}

// optional .Program program = 3;
inline bool Timer::has_program() const {
  return !_is_default_instance_ && program_ != NULL;
}
inline void Timer::clear_program() {
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;
}
inline const ::Program& Timer::program() const {
  // @@protoc_insertion_point(field_get:Timer.program)
  return program_ != NULL ? *program_ : *default_instance_->program_;
}
inline ::Program* Timer::mutable_program() {
  
  if (program_ == NULL) {
    program_ = new ::Program;
  }
  // @@protoc_insertion_point(field_mutable:Timer.program)
  return program_;
}
inline ::Program* Timer::release_program() {
  
  ::Program* temp = program_;
  program_ = NULL;
  return temp;
}
inline void Timer::set_allocated_program(::Program* program) {
  delete program_;
  program_ = program;
  if (program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Timer.program)
}

// optional uint64 repeatInterval = 4;
inline void Timer::clear_repeatinterval() {
  repeatinterval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Timer::repeatinterval() const {
  // @@protoc_insertion_point(field_get:Timer.repeatInterval)
  return repeatinterval_;
}
inline void Timer::set_repeatinterval(::google::protobuf::uint64 value) {
  
  repeatinterval_ = value;
  // @@protoc_insertion_point(field_set:Timer.repeatInterval)
}

// optional uint32 repeatTimes = 5;
inline void Timer::clear_repeattimes() {
  repeattimes_ = 0u;
}
inline ::google::protobuf::uint32 Timer::repeattimes() const {
  // @@protoc_insertion_point(field_get:Timer.repeatTimes)
  return repeattimes_;
}
inline void Timer::set_repeattimes(::google::protobuf::uint32 value) {
  
  repeattimes_ = value;
  // @@protoc_insertion_point(field_set:Timer.repeatTimes)
}

// optional uint64 startTime = 6;
inline void Timer::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Timer::starttime() const {
  // @@protoc_insertion_point(field_get:Timer.startTime)
  return starttime_;
}
inline void Timer::set_starttime(::google::protobuf::uint64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Timer.startTime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Timer_2eproto__INCLUDED
