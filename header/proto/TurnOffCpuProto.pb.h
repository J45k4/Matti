// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TurnOffCpuProto.proto

#ifndef PROTOBUF_TurnOffCpuProto_2eproto__INCLUDED
#define PROTOBUF_TurnOffCpuProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TurnOffCpuProto_2eproto();
void protobuf_AssignDesc_TurnOffCpuProto_2eproto();
void protobuf_ShutdownFile_TurnOffCpuProto_2eproto();

class TurnOffCpuProto;

// ===================================================================

class TurnOffCpuProto : public ::google::protobuf::Message {
 public:
  TurnOffCpuProto();
  virtual ~TurnOffCpuProto();

  TurnOffCpuProto(const TurnOffCpuProto& from);

  inline TurnOffCpuProto& operator=(const TurnOffCpuProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnOffCpuProto& default_instance();

  void Swap(TurnOffCpuProto* other);

  // implements Message ----------------------------------------------

  inline TurnOffCpuProto* New() const { return New(NULL); }

  TurnOffCpuProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnOffCpuProto& from);
  void MergeFrom(const TurnOffCpuProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TurnOffCpuProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matrixId = 1;
  void clear_matrixid();
  static const int kMatrixIdFieldNumber = 1;
  ::google::protobuf::uint32 matrixid() const;
  void set_matrixid(::google::protobuf::uint32 value);

  // optional uint32 cpu = 2;
  void clear_cpu();
  static const int kCpuFieldNumber = 2;
  ::google::protobuf::uint32 cpu() const;
  void set_cpu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TurnOffCpuProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 matrixid_;
  ::google::protobuf::uint32 cpu_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_TurnOffCpuProto_2eproto();
  friend void protobuf_AssignDesc_TurnOffCpuProto_2eproto();
  friend void protobuf_ShutdownFile_TurnOffCpuProto_2eproto();

  void InitAsDefaultInstance();
  static TurnOffCpuProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnOffCpuProto

// optional uint32 matrixId = 1;
inline void TurnOffCpuProto::clear_matrixid() {
  matrixid_ = 0u;
}
inline ::google::protobuf::uint32 TurnOffCpuProto::matrixid() const {
  // @@protoc_insertion_point(field_get:TurnOffCpuProto.matrixId)
  return matrixid_;
}
inline void TurnOffCpuProto::set_matrixid(::google::protobuf::uint32 value) {
  
  matrixid_ = value;
  // @@protoc_insertion_point(field_set:TurnOffCpuProto.matrixId)
}

// optional uint32 cpu = 2;
inline void TurnOffCpuProto::clear_cpu() {
  cpu_ = 0u;
}
inline ::google::protobuf::uint32 TurnOffCpuProto::cpu() const {
  // @@protoc_insertion_point(field_get:TurnOffCpuProto.cpu)
  return cpu_;
}
inline void TurnOffCpuProto::set_cpu(::google::protobuf::uint32 value) {
  
  cpu_ = value;
  // @@protoc_insertion_point(field_set:TurnOffCpuProto.cpu)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TurnOffCpuProto_2eproto__INCLUDED
