// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiRequest.proto

#ifndef PROTOBUF_MattiRequest_2eproto__INCLUDED
#define PROTOBUF_MattiRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "VideoConnection.pb.h"
#include "KwmConnection.pb.h"
#include "Matrix.pb.h"
#include "Program.pb.h"
#include "Timer.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MattiRequest_2eproto();
void protobuf_AssignDesc_MattiRequest_2eproto();
void protobuf_ShutdownFile_MattiRequest_2eproto();

class MattiRequest;

// ===================================================================

class MattiRequest : public ::google::protobuf::Message {
 public:
  MattiRequest();
  virtual ~MattiRequest();

  MattiRequest(const MattiRequest& from);

  inline MattiRequest& operator=(const MattiRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MattiRequest& default_instance();

  enum RequestMessageCase {
    kRequestValues = 2,
    kRequestMatrixStates = 3,
    kInsertVideoConnection = 4,
    kInsertKwmConnection = 5,
    kInsertMatrix = 6,
    kInsertTimer = 7,
    kInsertProgram = 8,
    kRemoveVideoConnection = 9,
    kRemoveKwmConnection = 10,
    kRemoveMatrix = 11,
    kRemoveTimer = 12,
    kRemoveProgram = 13,
    REQUESTMESSAGE_NOT_SET = 0,
  };

  void Swap(MattiRequest* other);

  // implements Message ----------------------------------------------

  inline MattiRequest* New() const { return New(NULL); }

  MattiRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MattiRequest& from);
  void MergeFrom(const MattiRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MattiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  ::google::protobuf::uint32 ticket() const;
  void set_ticket(::google::protobuf::uint32 value);

  // optional uint32 requestValues = 2;
  private:
  bool has_requestvalues() const;
  public:
  void clear_requestvalues();
  static const int kRequestValuesFieldNumber = 2;
  ::google::protobuf::uint32 requestvalues() const;
  void set_requestvalues(::google::protobuf::uint32 value);

  // optional uint32 requestMatrixStates = 3;
  private:
  bool has_requestmatrixstates() const;
  public:
  void clear_requestmatrixstates();
  static const int kRequestMatrixStatesFieldNumber = 3;
  ::google::protobuf::uint32 requestmatrixstates() const;
  void set_requestmatrixstates(::google::protobuf::uint32 value);

  // optional .VideoConnection insertVideoConnection = 4;
  bool has_insertvideoconnection() const;
  void clear_insertvideoconnection();
  static const int kInsertVideoConnectionFieldNumber = 4;
  const ::VideoConnection& insertvideoconnection() const;
  ::VideoConnection* mutable_insertvideoconnection();
  ::VideoConnection* release_insertvideoconnection();
  void set_allocated_insertvideoconnection(::VideoConnection* insertvideoconnection);

  // optional .KwmConnection insertKwmConnection = 5;
  bool has_insertkwmconnection() const;
  void clear_insertkwmconnection();
  static const int kInsertKwmConnectionFieldNumber = 5;
  const ::KwmConnection& insertkwmconnection() const;
  ::KwmConnection* mutable_insertkwmconnection();
  ::KwmConnection* release_insertkwmconnection();
  void set_allocated_insertkwmconnection(::KwmConnection* insertkwmconnection);

  // optional .MatrixProto insertMatrix = 6;
  bool has_insertmatrix() const;
  void clear_insertmatrix();
  static const int kInsertMatrixFieldNumber = 6;
  const ::MatrixProto& insertmatrix() const;
  ::MatrixProto* mutable_insertmatrix();
  ::MatrixProto* release_insertmatrix();
  void set_allocated_insertmatrix(::MatrixProto* insertmatrix);

  // optional .Timer insertTimer = 7;
  bool has_inserttimer() const;
  void clear_inserttimer();
  static const int kInsertTimerFieldNumber = 7;
  const ::Timer& inserttimer() const;
  ::Timer* mutable_inserttimer();
  ::Timer* release_inserttimer();
  void set_allocated_inserttimer(::Timer* inserttimer);

  // optional .Program insertProgram = 8;
  bool has_insertprogram() const;
  void clear_insertprogram();
  static const int kInsertProgramFieldNumber = 8;
  const ::Program& insertprogram() const;
  ::Program* mutable_insertprogram();
  ::Program* release_insertprogram();
  void set_allocated_insertprogram(::Program* insertprogram);

  // optional uint32 removeVideoConnection = 9;
  private:
  bool has_removevideoconnection() const;
  public:
  void clear_removevideoconnection();
  static const int kRemoveVideoConnectionFieldNumber = 9;
  ::google::protobuf::uint32 removevideoconnection() const;
  void set_removevideoconnection(::google::protobuf::uint32 value);

  // optional uint32 removeKwmConnection = 10;
  private:
  bool has_removekwmconnection() const;
  public:
  void clear_removekwmconnection();
  static const int kRemoveKwmConnectionFieldNumber = 10;
  ::google::protobuf::uint32 removekwmconnection() const;
  void set_removekwmconnection(::google::protobuf::uint32 value);

  // optional uint32 removeMatrix = 11;
  private:
  bool has_removematrix() const;
  public:
  void clear_removematrix();
  static const int kRemoveMatrixFieldNumber = 11;
  ::google::protobuf::uint32 removematrix() const;
  void set_removematrix(::google::protobuf::uint32 value);

  // optional uint32 removeTimer = 12;
  private:
  bool has_removetimer() const;
  public:
  void clear_removetimer();
  static const int kRemoveTimerFieldNumber = 12;
  ::google::protobuf::uint32 removetimer() const;
  void set_removetimer(::google::protobuf::uint32 value);

  // optional uint32 removeProgram = 13;
  private:
  bool has_removeprogram() const;
  public:
  void clear_removeprogram();
  static const int kRemoveProgramFieldNumber = 13;
  ::google::protobuf::uint32 removeprogram() const;
  void set_removeprogram(::google::protobuf::uint32 value);

  RequestMessageCase requestMessage_case() const;
  // @@protoc_insertion_point(class_scope:MattiRequest)
 private:
  inline void set_has_requestvalues();
  inline void set_has_requestmatrixstates();
  inline void set_has_insertvideoconnection();
  inline void set_has_insertkwmconnection();
  inline void set_has_insertmatrix();
  inline void set_has_inserttimer();
  inline void set_has_insertprogram();
  inline void set_has_removevideoconnection();
  inline void set_has_removekwmconnection();
  inline void set_has_removematrix();
  inline void set_has_removetimer();
  inline void set_has_removeprogram();

  inline bool has_requestMessage() const;
  void clear_requestMessage();
  inline void clear_has_requestMessage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 ticket_;
  union RequestMessageUnion {
    RequestMessageUnion() {}
    ::google::protobuf::uint32 requestvalues_;
    ::google::protobuf::uint32 requestmatrixstates_;
    ::VideoConnection* insertvideoconnection_;
    ::KwmConnection* insertkwmconnection_;
    ::MatrixProto* insertmatrix_;
    ::Timer* inserttimer_;
    ::Program* insertprogram_;
    ::google::protobuf::uint32 removevideoconnection_;
    ::google::protobuf::uint32 removekwmconnection_;
    ::google::protobuf::uint32 removematrix_;
    ::google::protobuf::uint32 removetimer_;
    ::google::protobuf::uint32 removeprogram_;
  } requestMessage_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MattiRequest_2eproto();
  friend void protobuf_AssignDesc_MattiRequest_2eproto();
  friend void protobuf_ShutdownFile_MattiRequest_2eproto();

  void InitAsDefaultInstance();
  static MattiRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiRequest

// optional uint32 ticket = 1;
inline void MattiRequest::clear_ticket() {
  ticket_ = 0u;
}
inline ::google::protobuf::uint32 MattiRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MattiRequest.ticket)
  return ticket_;
}
inline void MattiRequest::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.ticket)
}

// optional uint32 requestValues = 2;
inline bool MattiRequest::has_requestvalues() const {
  return requestMessage_case() == kRequestValues;
}
inline void MattiRequest::set_has_requestvalues() {
  _oneof_case_[0] = kRequestValues;
}
inline void MattiRequest::clear_requestvalues() {
  if (has_requestvalues()) {
    requestMessage_.requestvalues_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::requestvalues() const {
  // @@protoc_insertion_point(field_get:MattiRequest.requestValues)
  if (has_requestvalues()) {
    return requestMessage_.requestvalues_;
  }
  return 0u;
}
inline void MattiRequest::set_requestvalues(::google::protobuf::uint32 value) {
  if (!has_requestvalues()) {
    clear_requestMessage();
    set_has_requestvalues();
  }
  requestMessage_.requestvalues_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.requestValues)
}

// optional uint32 requestMatrixStates = 3;
inline bool MattiRequest::has_requestmatrixstates() const {
  return requestMessage_case() == kRequestMatrixStates;
}
inline void MattiRequest::set_has_requestmatrixstates() {
  _oneof_case_[0] = kRequestMatrixStates;
}
inline void MattiRequest::clear_requestmatrixstates() {
  if (has_requestmatrixstates()) {
    requestMessage_.requestmatrixstates_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::requestmatrixstates() const {
  // @@protoc_insertion_point(field_get:MattiRequest.requestMatrixStates)
  if (has_requestmatrixstates()) {
    return requestMessage_.requestmatrixstates_;
  }
  return 0u;
}
inline void MattiRequest::set_requestmatrixstates(::google::protobuf::uint32 value) {
  if (!has_requestmatrixstates()) {
    clear_requestMessage();
    set_has_requestmatrixstates();
  }
  requestMessage_.requestmatrixstates_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.requestMatrixStates)
}

// optional .VideoConnection insertVideoConnection = 4;
inline bool MattiRequest::has_insertvideoconnection() const {
  return requestMessage_case() == kInsertVideoConnection;
}
inline void MattiRequest::set_has_insertvideoconnection() {
  _oneof_case_[0] = kInsertVideoConnection;
}
inline void MattiRequest::clear_insertvideoconnection() {
  if (has_insertvideoconnection()) {
    delete requestMessage_.insertvideoconnection_;
    clear_has_requestMessage();
  }
}
inline  const ::VideoConnection& MattiRequest::insertvideoconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertVideoConnection)
  return has_insertvideoconnection()
      ? *requestMessage_.insertvideoconnection_
      : ::VideoConnection::default_instance();
}
inline ::VideoConnection* MattiRequest::mutable_insertvideoconnection() {
  if (!has_insertvideoconnection()) {
    clear_requestMessage();
    set_has_insertvideoconnection();
    requestMessage_.insertvideoconnection_ = new ::VideoConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertVideoConnection)
  return requestMessage_.insertvideoconnection_;
}
inline ::VideoConnection* MattiRequest::release_insertvideoconnection() {
  if (has_insertvideoconnection()) {
    clear_has_requestMessage();
    ::VideoConnection* temp = requestMessage_.insertvideoconnection_;
    requestMessage_.insertvideoconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_insertvideoconnection(::VideoConnection* insertvideoconnection) {
  clear_requestMessage();
  if (insertvideoconnection) {
    set_has_insertvideoconnection();
    requestMessage_.insertvideoconnection_ = insertvideoconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertVideoConnection)
}

// optional .KwmConnection insertKwmConnection = 5;
inline bool MattiRequest::has_insertkwmconnection() const {
  return requestMessage_case() == kInsertKwmConnection;
}
inline void MattiRequest::set_has_insertkwmconnection() {
  _oneof_case_[0] = kInsertKwmConnection;
}
inline void MattiRequest::clear_insertkwmconnection() {
  if (has_insertkwmconnection()) {
    delete requestMessage_.insertkwmconnection_;
    clear_has_requestMessage();
  }
}
inline  const ::KwmConnection& MattiRequest::insertkwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertKwmConnection)
  return has_insertkwmconnection()
      ? *requestMessage_.insertkwmconnection_
      : ::KwmConnection::default_instance();
}
inline ::KwmConnection* MattiRequest::mutable_insertkwmconnection() {
  if (!has_insertkwmconnection()) {
    clear_requestMessage();
    set_has_insertkwmconnection();
    requestMessage_.insertkwmconnection_ = new ::KwmConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertKwmConnection)
  return requestMessage_.insertkwmconnection_;
}
inline ::KwmConnection* MattiRequest::release_insertkwmconnection() {
  if (has_insertkwmconnection()) {
    clear_has_requestMessage();
    ::KwmConnection* temp = requestMessage_.insertkwmconnection_;
    requestMessage_.insertkwmconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_insertkwmconnection(::KwmConnection* insertkwmconnection) {
  clear_requestMessage();
  if (insertkwmconnection) {
    set_has_insertkwmconnection();
    requestMessage_.insertkwmconnection_ = insertkwmconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertKwmConnection)
}

// optional .MatrixProto insertMatrix = 6;
inline bool MattiRequest::has_insertmatrix() const {
  return requestMessage_case() == kInsertMatrix;
}
inline void MattiRequest::set_has_insertmatrix() {
  _oneof_case_[0] = kInsertMatrix;
}
inline void MattiRequest::clear_insertmatrix() {
  if (has_insertmatrix()) {
    delete requestMessage_.insertmatrix_;
    clear_has_requestMessage();
  }
}
inline  const ::MatrixProto& MattiRequest::insertmatrix() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertMatrix)
  return has_insertmatrix()
      ? *requestMessage_.insertmatrix_
      : ::MatrixProto::default_instance();
}
inline ::MatrixProto* MattiRequest::mutable_insertmatrix() {
  if (!has_insertmatrix()) {
    clear_requestMessage();
    set_has_insertmatrix();
    requestMessage_.insertmatrix_ = new ::MatrixProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertMatrix)
  return requestMessage_.insertmatrix_;
}
inline ::MatrixProto* MattiRequest::release_insertmatrix() {
  if (has_insertmatrix()) {
    clear_has_requestMessage();
    ::MatrixProto* temp = requestMessage_.insertmatrix_;
    requestMessage_.insertmatrix_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_insertmatrix(::MatrixProto* insertmatrix) {
  clear_requestMessage();
  if (insertmatrix) {
    set_has_insertmatrix();
    requestMessage_.insertmatrix_ = insertmatrix;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertMatrix)
}

// optional .Timer insertTimer = 7;
inline bool MattiRequest::has_inserttimer() const {
  return requestMessage_case() == kInsertTimer;
}
inline void MattiRequest::set_has_inserttimer() {
  _oneof_case_[0] = kInsertTimer;
}
inline void MattiRequest::clear_inserttimer() {
  if (has_inserttimer()) {
    delete requestMessage_.inserttimer_;
    clear_has_requestMessage();
  }
}
inline  const ::Timer& MattiRequest::inserttimer() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertTimer)
  return has_inserttimer()
      ? *requestMessage_.inserttimer_
      : ::Timer::default_instance();
}
inline ::Timer* MattiRequest::mutable_inserttimer() {
  if (!has_inserttimer()) {
    clear_requestMessage();
    set_has_inserttimer();
    requestMessage_.inserttimer_ = new ::Timer;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertTimer)
  return requestMessage_.inserttimer_;
}
inline ::Timer* MattiRequest::release_inserttimer() {
  if (has_inserttimer()) {
    clear_has_requestMessage();
    ::Timer* temp = requestMessage_.inserttimer_;
    requestMessage_.inserttimer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_inserttimer(::Timer* inserttimer) {
  clear_requestMessage();
  if (inserttimer) {
    set_has_inserttimer();
    requestMessage_.inserttimer_ = inserttimer;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertTimer)
}

// optional .Program insertProgram = 8;
inline bool MattiRequest::has_insertprogram() const {
  return requestMessage_case() == kInsertProgram;
}
inline void MattiRequest::set_has_insertprogram() {
  _oneof_case_[0] = kInsertProgram;
}
inline void MattiRequest::clear_insertprogram() {
  if (has_insertprogram()) {
    delete requestMessage_.insertprogram_;
    clear_has_requestMessage();
  }
}
inline  const ::Program& MattiRequest::insertprogram() const {
  // @@protoc_insertion_point(field_get:MattiRequest.insertProgram)
  return has_insertprogram()
      ? *requestMessage_.insertprogram_
      : ::Program::default_instance();
}
inline ::Program* MattiRequest::mutable_insertprogram() {
  if (!has_insertprogram()) {
    clear_requestMessage();
    set_has_insertprogram();
    requestMessage_.insertprogram_ = new ::Program;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.insertProgram)
  return requestMessage_.insertprogram_;
}
inline ::Program* MattiRequest::release_insertprogram() {
  if (has_insertprogram()) {
    clear_has_requestMessage();
    ::Program* temp = requestMessage_.insertprogram_;
    requestMessage_.insertprogram_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_insertprogram(::Program* insertprogram) {
  clear_requestMessage();
  if (insertprogram) {
    set_has_insertprogram();
    requestMessage_.insertprogram_ = insertprogram;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.insertProgram)
}

// optional uint32 removeVideoConnection = 9;
inline bool MattiRequest::has_removevideoconnection() const {
  return requestMessage_case() == kRemoveVideoConnection;
}
inline void MattiRequest::set_has_removevideoconnection() {
  _oneof_case_[0] = kRemoveVideoConnection;
}
inline void MattiRequest::clear_removevideoconnection() {
  if (has_removevideoconnection()) {
    requestMessage_.removevideoconnection_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::removevideoconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeVideoConnection)
  if (has_removevideoconnection()) {
    return requestMessage_.removevideoconnection_;
  }
  return 0u;
}
inline void MattiRequest::set_removevideoconnection(::google::protobuf::uint32 value) {
  if (!has_removevideoconnection()) {
    clear_requestMessage();
    set_has_removevideoconnection();
  }
  requestMessage_.removevideoconnection_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeVideoConnection)
}

// optional uint32 removeKwmConnection = 10;
inline bool MattiRequest::has_removekwmconnection() const {
  return requestMessage_case() == kRemoveKwmConnection;
}
inline void MattiRequest::set_has_removekwmconnection() {
  _oneof_case_[0] = kRemoveKwmConnection;
}
inline void MattiRequest::clear_removekwmconnection() {
  if (has_removekwmconnection()) {
    requestMessage_.removekwmconnection_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::removekwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeKwmConnection)
  if (has_removekwmconnection()) {
    return requestMessage_.removekwmconnection_;
  }
  return 0u;
}
inline void MattiRequest::set_removekwmconnection(::google::protobuf::uint32 value) {
  if (!has_removekwmconnection()) {
    clear_requestMessage();
    set_has_removekwmconnection();
  }
  requestMessage_.removekwmconnection_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeKwmConnection)
}

// optional uint32 removeMatrix = 11;
inline bool MattiRequest::has_removematrix() const {
  return requestMessage_case() == kRemoveMatrix;
}
inline void MattiRequest::set_has_removematrix() {
  _oneof_case_[0] = kRemoveMatrix;
}
inline void MattiRequest::clear_removematrix() {
  if (has_removematrix()) {
    requestMessage_.removematrix_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::removematrix() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeMatrix)
  if (has_removematrix()) {
    return requestMessage_.removematrix_;
  }
  return 0u;
}
inline void MattiRequest::set_removematrix(::google::protobuf::uint32 value) {
  if (!has_removematrix()) {
    clear_requestMessage();
    set_has_removematrix();
  }
  requestMessage_.removematrix_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeMatrix)
}

// optional uint32 removeTimer = 12;
inline bool MattiRequest::has_removetimer() const {
  return requestMessage_case() == kRemoveTimer;
}
inline void MattiRequest::set_has_removetimer() {
  _oneof_case_[0] = kRemoveTimer;
}
inline void MattiRequest::clear_removetimer() {
  if (has_removetimer()) {
    requestMessage_.removetimer_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::removetimer() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeTimer)
  if (has_removetimer()) {
    return requestMessage_.removetimer_;
  }
  return 0u;
}
inline void MattiRequest::set_removetimer(::google::protobuf::uint32 value) {
  if (!has_removetimer()) {
    clear_requestMessage();
    set_has_removetimer();
  }
  requestMessage_.removetimer_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeTimer)
}

// optional uint32 removeProgram = 13;
inline bool MattiRequest::has_removeprogram() const {
  return requestMessage_case() == kRemoveProgram;
}
inline void MattiRequest::set_has_removeprogram() {
  _oneof_case_[0] = kRemoveProgram;
}
inline void MattiRequest::clear_removeprogram() {
  if (has_removeprogram()) {
    requestMessage_.removeprogram_ = 0u;
    clear_has_requestMessage();
  }
}
inline ::google::protobuf::uint32 MattiRequest::removeprogram() const {
  // @@protoc_insertion_point(field_get:MattiRequest.removeProgram)
  if (has_removeprogram()) {
    return requestMessage_.removeprogram_;
  }
  return 0u;
}
inline void MattiRequest::set_removeprogram(::google::protobuf::uint32 value) {
  if (!has_removeprogram()) {
    clear_requestMessage();
    set_has_removeprogram();
  }
  requestMessage_.removeprogram_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.removeProgram)
}

inline bool MattiRequest::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
inline void MattiRequest::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
inline MattiRequest::RequestMessageCase MattiRequest::requestMessage_case() const {
  return MattiRequest::RequestMessageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MattiRequest_2eproto__INCLUDED
