// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Timers.proto

#ifndef PROTOBUF_Timers_2eproto__INCLUDED
#define PROTOBUF_Timers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timer.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Timers_2eproto();
void protobuf_AssignDesc_Timers_2eproto();
void protobuf_ShutdownFile_Timers_2eproto();

class Timers;

// ===================================================================

class Timers : public ::google::protobuf::Message {
 public:
  Timers();
  virtual ~Timers();

  Timers(const Timers& from);

  inline Timers& operator=(const Timers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timers& default_instance();

  void Swap(Timers* other);

  // implements Message ----------------------------------------------

  inline Timers* New() const { return New(NULL); }

  Timers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timers& from);
  void MergeFrom(const Timers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Timer timers = 1;
  int timers_size() const;
  void clear_timers();
  static const int kTimersFieldNumber = 1;
  const ::Timer& timers(int index) const;
  ::Timer* mutable_timers(int index);
  ::Timer* add_timers();
  ::google::protobuf::RepeatedPtrField< ::Timer >*
      mutable_timers();
  const ::google::protobuf::RepeatedPtrField< ::Timer >&
      timers() const;

  // @@protoc_insertion_point(class_scope:Timers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Timer > timers_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Timers_2eproto();
  friend void protobuf_AssignDesc_Timers_2eproto();
  friend void protobuf_ShutdownFile_Timers_2eproto();

  void InitAsDefaultInstance();
  static Timers* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Timers

// repeated .Timer timers = 1;
inline int Timers::timers_size() const {
  return timers_.size();
}
inline void Timers::clear_timers() {
  timers_.Clear();
}
inline const ::Timer& Timers::timers(int index) const {
  // @@protoc_insertion_point(field_get:Timers.timers)
  return timers_.Get(index);
}
inline ::Timer* Timers::mutable_timers(int index) {
  // @@protoc_insertion_point(field_mutable:Timers.timers)
  return timers_.Mutable(index);
}
inline ::Timer* Timers::add_timers() {
  // @@protoc_insertion_point(field_add:Timers.timers)
  return timers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Timer >*
Timers::mutable_timers() {
  // @@protoc_insertion_point(field_mutable_list:Timers.timers)
  return &timers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Timer >&
Timers::timers() const {
  // @@protoc_insertion_point(field_list:Timers.timers)
  return timers_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Timers_2eproto__INCLUDED
