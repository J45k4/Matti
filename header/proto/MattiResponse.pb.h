// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiResponse.proto

#ifndef PROTOBUF_MattiResponse_2eproto__INCLUDED
#define PROTOBUF_MattiResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "VideoConnection.pb.h"
#include "KwmConnection.pb.h"
#include "MatrixProto.pb.h"
#include "MatrixProtos.pb.h"
#include "TimerProto.pb.h"
#include "TimerProtos.pb.h"
#include "ProgramProto.pb.h"
#include "ProgramProtos.pb.h"
#include "AllConnections.pb.h"
#include "LockProto.pb.h"
#include "LockProtos.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MattiResponse_2eproto();
void protobuf_AssignDesc_MattiResponse_2eproto();
void protobuf_ShutdownFile_MattiResponse_2eproto();

class MattiResponse;

// ===================================================================

class MattiResponse : public ::google::protobuf::Message {
 public:
  MattiResponse();
  virtual ~MattiResponse();

  MattiResponse(const MattiResponse& from);

  inline MattiResponse& operator=(const MattiResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MattiResponse& default_instance();

  enum RequestMessageCase {
    kVideoConnection = 2,
    kKwmConnection = 3,
    kMatrix = 4,
    kTimer = 5,
    kProgram = 6,
    kAllConnections = 7,
    kMatrixs = 8,
    kTimers = 9,
    kPrograms = 10,
    kLockProto = 11,
    kLockProtos = 12,
    REQUESTMESSAGE_NOT_SET = 0,
  };

  void Swap(MattiResponse* other);

  // implements Message ----------------------------------------------

  inline MattiResponse* New() const { return New(NULL); }

  MattiResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MattiResponse& from);
  void MergeFrom(const MattiResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MattiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  ::google::protobuf::uint32 ticket() const;
  void set_ticket(::google::protobuf::uint32 value);

  // optional .VideoConnection videoConnection = 2;
  bool has_videoconnection() const;
  void clear_videoconnection();
  static const int kVideoConnectionFieldNumber = 2;
  const ::VideoConnection& videoconnection() const;
  ::VideoConnection* mutable_videoconnection();
  ::VideoConnection* release_videoconnection();
  void set_allocated_videoconnection(::VideoConnection* videoconnection);

  // optional .KwmConnection kwmConnection = 3;
  bool has_kwmconnection() const;
  void clear_kwmconnection();
  static const int kKwmConnectionFieldNumber = 3;
  const ::KwmConnection& kwmconnection() const;
  ::KwmConnection* mutable_kwmconnection();
  ::KwmConnection* release_kwmconnection();
  void set_allocated_kwmconnection(::KwmConnection* kwmconnection);

  // optional .MatrixProto matrix = 4;
  bool has_matrix() const;
  void clear_matrix();
  static const int kMatrixFieldNumber = 4;
  const ::MatrixProto& matrix() const;
  ::MatrixProto* mutable_matrix();
  ::MatrixProto* release_matrix();
  void set_allocated_matrix(::MatrixProto* matrix);

  // optional .TimerProto timer = 5;
  bool has_timer() const;
  void clear_timer();
  static const int kTimerFieldNumber = 5;
  const ::TimerProto& timer() const;
  ::TimerProto* mutable_timer();
  ::TimerProto* release_timer();
  void set_allocated_timer(::TimerProto* timer);

  // optional .ProgramProto program = 6;
  bool has_program() const;
  void clear_program();
  static const int kProgramFieldNumber = 6;
  const ::ProgramProto& program() const;
  ::ProgramProto* mutable_program();
  ::ProgramProto* release_program();
  void set_allocated_program(::ProgramProto* program);

  // optional .AllConnections allConnections = 7;
  bool has_allconnections() const;
  void clear_allconnections();
  static const int kAllConnectionsFieldNumber = 7;
  const ::AllConnections& allconnections() const;
  ::AllConnections* mutable_allconnections();
  ::AllConnections* release_allconnections();
  void set_allocated_allconnections(::AllConnections* allconnections);

  // optional .MatrixProtos matrixs = 8;
  bool has_matrixs() const;
  void clear_matrixs();
  static const int kMatrixsFieldNumber = 8;
  const ::MatrixProtos& matrixs() const;
  ::MatrixProtos* mutable_matrixs();
  ::MatrixProtos* release_matrixs();
  void set_allocated_matrixs(::MatrixProtos* matrixs);

  // optional .TimerProtos timers = 9;
  bool has_timers() const;
  void clear_timers();
  static const int kTimersFieldNumber = 9;
  const ::TimerProtos& timers() const;
  ::TimerProtos* mutable_timers();
  ::TimerProtos* release_timers();
  void set_allocated_timers(::TimerProtos* timers);

  // optional .ProgramProtos programs = 10;
  bool has_programs() const;
  void clear_programs();
  static const int kProgramsFieldNumber = 10;
  const ::ProgramProtos& programs() const;
  ::ProgramProtos* mutable_programs();
  ::ProgramProtos* release_programs();
  void set_allocated_programs(::ProgramProtos* programs);

  // optional .LockProto lockProto = 11;
  bool has_lockproto() const;
  void clear_lockproto();
  static const int kLockProtoFieldNumber = 11;
  const ::LockProto& lockproto() const;
  ::LockProto* mutable_lockproto();
  ::LockProto* release_lockproto();
  void set_allocated_lockproto(::LockProto* lockproto);

  // optional .LockProtos lockProtos = 12;
  bool has_lockprotos() const;
  void clear_lockprotos();
  static const int kLockProtosFieldNumber = 12;
  const ::LockProtos& lockprotos() const;
  ::LockProtos* mutable_lockprotos();
  ::LockProtos* release_lockprotos();
  void set_allocated_lockprotos(::LockProtos* lockprotos);

  RequestMessageCase requestMessage_case() const;
  // @@protoc_insertion_point(class_scope:MattiResponse)
 private:
  inline void set_has_videoconnection();
  inline void set_has_kwmconnection();
  inline void set_has_matrix();
  inline void set_has_timer();
  inline void set_has_program();
  inline void set_has_allconnections();
  inline void set_has_matrixs();
  inline void set_has_timers();
  inline void set_has_programs();
  inline void set_has_lockproto();
  inline void set_has_lockprotos();

  inline bool has_requestMessage() const;
  void clear_requestMessage();
  inline void clear_has_requestMessage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 ticket_;
  union RequestMessageUnion {
    RequestMessageUnion() {}
    ::VideoConnection* videoconnection_;
    ::KwmConnection* kwmconnection_;
    ::MatrixProto* matrix_;
    ::TimerProto* timer_;
    ::ProgramProto* program_;
    ::AllConnections* allconnections_;
    ::MatrixProtos* matrixs_;
    ::TimerProtos* timers_;
    ::ProgramProtos* programs_;
    ::LockProto* lockproto_;
    ::LockProtos* lockprotos_;
  } requestMessage_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MattiResponse_2eproto();
  friend void protobuf_AssignDesc_MattiResponse_2eproto();
  friend void protobuf_ShutdownFile_MattiResponse_2eproto();

  void InitAsDefaultInstance();
  static MattiResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiResponse

// optional uint32 ticket = 1;
inline void MattiResponse::clear_ticket() {
  ticket_ = 0u;
}
inline ::google::protobuf::uint32 MattiResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MattiResponse.ticket)
  return ticket_;
}
inline void MattiResponse::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiResponse.ticket)
}

// optional .VideoConnection videoConnection = 2;
inline bool MattiResponse::has_videoconnection() const {
  return requestMessage_case() == kVideoConnection;
}
inline void MattiResponse::set_has_videoconnection() {
  _oneof_case_[0] = kVideoConnection;
}
inline void MattiResponse::clear_videoconnection() {
  if (has_videoconnection()) {
    delete requestMessage_.videoconnection_;
    clear_has_requestMessage();
  }
}
inline  const ::VideoConnection& MattiResponse::videoconnection() const {
  // @@protoc_insertion_point(field_get:MattiResponse.videoConnection)
  return has_videoconnection()
      ? *requestMessage_.videoconnection_
      : ::VideoConnection::default_instance();
}
inline ::VideoConnection* MattiResponse::mutable_videoconnection() {
  if (!has_videoconnection()) {
    clear_requestMessage();
    set_has_videoconnection();
    requestMessage_.videoconnection_ = new ::VideoConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.videoConnection)
  return requestMessage_.videoconnection_;
}
inline ::VideoConnection* MattiResponse::release_videoconnection() {
  if (has_videoconnection()) {
    clear_has_requestMessage();
    ::VideoConnection* temp = requestMessage_.videoconnection_;
    requestMessage_.videoconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_videoconnection(::VideoConnection* videoconnection) {
  clear_requestMessage();
  if (videoconnection) {
    set_has_videoconnection();
    requestMessage_.videoconnection_ = videoconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.videoConnection)
}

// optional .KwmConnection kwmConnection = 3;
inline bool MattiResponse::has_kwmconnection() const {
  return requestMessage_case() == kKwmConnection;
}
inline void MattiResponse::set_has_kwmconnection() {
  _oneof_case_[0] = kKwmConnection;
}
inline void MattiResponse::clear_kwmconnection() {
  if (has_kwmconnection()) {
    delete requestMessage_.kwmconnection_;
    clear_has_requestMessage();
  }
}
inline  const ::KwmConnection& MattiResponse::kwmconnection() const {
  // @@protoc_insertion_point(field_get:MattiResponse.kwmConnection)
  return has_kwmconnection()
      ? *requestMessage_.kwmconnection_
      : ::KwmConnection::default_instance();
}
inline ::KwmConnection* MattiResponse::mutable_kwmconnection() {
  if (!has_kwmconnection()) {
    clear_requestMessage();
    set_has_kwmconnection();
    requestMessage_.kwmconnection_ = new ::KwmConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.kwmConnection)
  return requestMessage_.kwmconnection_;
}
inline ::KwmConnection* MattiResponse::release_kwmconnection() {
  if (has_kwmconnection()) {
    clear_has_requestMessage();
    ::KwmConnection* temp = requestMessage_.kwmconnection_;
    requestMessage_.kwmconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_kwmconnection(::KwmConnection* kwmconnection) {
  clear_requestMessage();
  if (kwmconnection) {
    set_has_kwmconnection();
    requestMessage_.kwmconnection_ = kwmconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.kwmConnection)
}

// optional .MatrixProto matrix = 4;
inline bool MattiResponse::has_matrix() const {
  return requestMessage_case() == kMatrix;
}
inline void MattiResponse::set_has_matrix() {
  _oneof_case_[0] = kMatrix;
}
inline void MattiResponse::clear_matrix() {
  if (has_matrix()) {
    delete requestMessage_.matrix_;
    clear_has_requestMessage();
  }
}
inline  const ::MatrixProto& MattiResponse::matrix() const {
  // @@protoc_insertion_point(field_get:MattiResponse.matrix)
  return has_matrix()
      ? *requestMessage_.matrix_
      : ::MatrixProto::default_instance();
}
inline ::MatrixProto* MattiResponse::mutable_matrix() {
  if (!has_matrix()) {
    clear_requestMessage();
    set_has_matrix();
    requestMessage_.matrix_ = new ::MatrixProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.matrix)
  return requestMessage_.matrix_;
}
inline ::MatrixProto* MattiResponse::release_matrix() {
  if (has_matrix()) {
    clear_has_requestMessage();
    ::MatrixProto* temp = requestMessage_.matrix_;
    requestMessage_.matrix_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_matrix(::MatrixProto* matrix) {
  clear_requestMessage();
  if (matrix) {
    set_has_matrix();
    requestMessage_.matrix_ = matrix;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.matrix)
}

// optional .TimerProto timer = 5;
inline bool MattiResponse::has_timer() const {
  return requestMessage_case() == kTimer;
}
inline void MattiResponse::set_has_timer() {
  _oneof_case_[0] = kTimer;
}
inline void MattiResponse::clear_timer() {
  if (has_timer()) {
    delete requestMessage_.timer_;
    clear_has_requestMessage();
  }
}
inline  const ::TimerProto& MattiResponse::timer() const {
  // @@protoc_insertion_point(field_get:MattiResponse.timer)
  return has_timer()
      ? *requestMessage_.timer_
      : ::TimerProto::default_instance();
}
inline ::TimerProto* MattiResponse::mutable_timer() {
  if (!has_timer()) {
    clear_requestMessage();
    set_has_timer();
    requestMessage_.timer_ = new ::TimerProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.timer)
  return requestMessage_.timer_;
}
inline ::TimerProto* MattiResponse::release_timer() {
  if (has_timer()) {
    clear_has_requestMessage();
    ::TimerProto* temp = requestMessage_.timer_;
    requestMessage_.timer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_timer(::TimerProto* timer) {
  clear_requestMessage();
  if (timer) {
    set_has_timer();
    requestMessage_.timer_ = timer;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.timer)
}

// optional .ProgramProto program = 6;
inline bool MattiResponse::has_program() const {
  return requestMessage_case() == kProgram;
}
inline void MattiResponse::set_has_program() {
  _oneof_case_[0] = kProgram;
}
inline void MattiResponse::clear_program() {
  if (has_program()) {
    delete requestMessage_.program_;
    clear_has_requestMessage();
  }
}
inline  const ::ProgramProto& MattiResponse::program() const {
  // @@protoc_insertion_point(field_get:MattiResponse.program)
  return has_program()
      ? *requestMessage_.program_
      : ::ProgramProto::default_instance();
}
inline ::ProgramProto* MattiResponse::mutable_program() {
  if (!has_program()) {
    clear_requestMessage();
    set_has_program();
    requestMessage_.program_ = new ::ProgramProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.program)
  return requestMessage_.program_;
}
inline ::ProgramProto* MattiResponse::release_program() {
  if (has_program()) {
    clear_has_requestMessage();
    ::ProgramProto* temp = requestMessage_.program_;
    requestMessage_.program_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_program(::ProgramProto* program) {
  clear_requestMessage();
  if (program) {
    set_has_program();
    requestMessage_.program_ = program;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.program)
}

// optional .AllConnections allConnections = 7;
inline bool MattiResponse::has_allconnections() const {
  return requestMessage_case() == kAllConnections;
}
inline void MattiResponse::set_has_allconnections() {
  _oneof_case_[0] = kAllConnections;
}
inline void MattiResponse::clear_allconnections() {
  if (has_allconnections()) {
    delete requestMessage_.allconnections_;
    clear_has_requestMessage();
  }
}
inline  const ::AllConnections& MattiResponse::allconnections() const {
  // @@protoc_insertion_point(field_get:MattiResponse.allConnections)
  return has_allconnections()
      ? *requestMessage_.allconnections_
      : ::AllConnections::default_instance();
}
inline ::AllConnections* MattiResponse::mutable_allconnections() {
  if (!has_allconnections()) {
    clear_requestMessage();
    set_has_allconnections();
    requestMessage_.allconnections_ = new ::AllConnections;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.allConnections)
  return requestMessage_.allconnections_;
}
inline ::AllConnections* MattiResponse::release_allconnections() {
  if (has_allconnections()) {
    clear_has_requestMessage();
    ::AllConnections* temp = requestMessage_.allconnections_;
    requestMessage_.allconnections_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_allconnections(::AllConnections* allconnections) {
  clear_requestMessage();
  if (allconnections) {
    set_has_allconnections();
    requestMessage_.allconnections_ = allconnections;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.allConnections)
}

// optional .MatrixProtos matrixs = 8;
inline bool MattiResponse::has_matrixs() const {
  return requestMessage_case() == kMatrixs;
}
inline void MattiResponse::set_has_matrixs() {
  _oneof_case_[0] = kMatrixs;
}
inline void MattiResponse::clear_matrixs() {
  if (has_matrixs()) {
    delete requestMessage_.matrixs_;
    clear_has_requestMessage();
  }
}
inline  const ::MatrixProtos& MattiResponse::matrixs() const {
  // @@protoc_insertion_point(field_get:MattiResponse.matrixs)
  return has_matrixs()
      ? *requestMessage_.matrixs_
      : ::MatrixProtos::default_instance();
}
inline ::MatrixProtos* MattiResponse::mutable_matrixs() {
  if (!has_matrixs()) {
    clear_requestMessage();
    set_has_matrixs();
    requestMessage_.matrixs_ = new ::MatrixProtos;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.matrixs)
  return requestMessage_.matrixs_;
}
inline ::MatrixProtos* MattiResponse::release_matrixs() {
  if (has_matrixs()) {
    clear_has_requestMessage();
    ::MatrixProtos* temp = requestMessage_.matrixs_;
    requestMessage_.matrixs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_matrixs(::MatrixProtos* matrixs) {
  clear_requestMessage();
  if (matrixs) {
    set_has_matrixs();
    requestMessage_.matrixs_ = matrixs;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.matrixs)
}

// optional .TimerProtos timers = 9;
inline bool MattiResponse::has_timers() const {
  return requestMessage_case() == kTimers;
}
inline void MattiResponse::set_has_timers() {
  _oneof_case_[0] = kTimers;
}
inline void MattiResponse::clear_timers() {
  if (has_timers()) {
    delete requestMessage_.timers_;
    clear_has_requestMessage();
  }
}
inline  const ::TimerProtos& MattiResponse::timers() const {
  // @@protoc_insertion_point(field_get:MattiResponse.timers)
  return has_timers()
      ? *requestMessage_.timers_
      : ::TimerProtos::default_instance();
}
inline ::TimerProtos* MattiResponse::mutable_timers() {
  if (!has_timers()) {
    clear_requestMessage();
    set_has_timers();
    requestMessage_.timers_ = new ::TimerProtos;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.timers)
  return requestMessage_.timers_;
}
inline ::TimerProtos* MattiResponse::release_timers() {
  if (has_timers()) {
    clear_has_requestMessage();
    ::TimerProtos* temp = requestMessage_.timers_;
    requestMessage_.timers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_timers(::TimerProtos* timers) {
  clear_requestMessage();
  if (timers) {
    set_has_timers();
    requestMessage_.timers_ = timers;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.timers)
}

// optional .ProgramProtos programs = 10;
inline bool MattiResponse::has_programs() const {
  return requestMessage_case() == kPrograms;
}
inline void MattiResponse::set_has_programs() {
  _oneof_case_[0] = kPrograms;
}
inline void MattiResponse::clear_programs() {
  if (has_programs()) {
    delete requestMessage_.programs_;
    clear_has_requestMessage();
  }
}
inline  const ::ProgramProtos& MattiResponse::programs() const {
  // @@protoc_insertion_point(field_get:MattiResponse.programs)
  return has_programs()
      ? *requestMessage_.programs_
      : ::ProgramProtos::default_instance();
}
inline ::ProgramProtos* MattiResponse::mutable_programs() {
  if (!has_programs()) {
    clear_requestMessage();
    set_has_programs();
    requestMessage_.programs_ = new ::ProgramProtos;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.programs)
  return requestMessage_.programs_;
}
inline ::ProgramProtos* MattiResponse::release_programs() {
  if (has_programs()) {
    clear_has_requestMessage();
    ::ProgramProtos* temp = requestMessage_.programs_;
    requestMessage_.programs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_programs(::ProgramProtos* programs) {
  clear_requestMessage();
  if (programs) {
    set_has_programs();
    requestMessage_.programs_ = programs;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.programs)
}

// optional .LockProto lockProto = 11;
inline bool MattiResponse::has_lockproto() const {
  return requestMessage_case() == kLockProto;
}
inline void MattiResponse::set_has_lockproto() {
  _oneof_case_[0] = kLockProto;
}
inline void MattiResponse::clear_lockproto() {
  if (has_lockproto()) {
    delete requestMessage_.lockproto_;
    clear_has_requestMessage();
  }
}
inline  const ::LockProto& MattiResponse::lockproto() const {
  // @@protoc_insertion_point(field_get:MattiResponse.lockProto)
  return has_lockproto()
      ? *requestMessage_.lockproto_
      : ::LockProto::default_instance();
}
inline ::LockProto* MattiResponse::mutable_lockproto() {
  if (!has_lockproto()) {
    clear_requestMessage();
    set_has_lockproto();
    requestMessage_.lockproto_ = new ::LockProto;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.lockProto)
  return requestMessage_.lockproto_;
}
inline ::LockProto* MattiResponse::release_lockproto() {
  if (has_lockproto()) {
    clear_has_requestMessage();
    ::LockProto* temp = requestMessage_.lockproto_;
    requestMessage_.lockproto_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_lockproto(::LockProto* lockproto) {
  clear_requestMessage();
  if (lockproto) {
    set_has_lockproto();
    requestMessage_.lockproto_ = lockproto;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.lockProto)
}

// optional .LockProtos lockProtos = 12;
inline bool MattiResponse::has_lockprotos() const {
  return requestMessage_case() == kLockProtos;
}
inline void MattiResponse::set_has_lockprotos() {
  _oneof_case_[0] = kLockProtos;
}
inline void MattiResponse::clear_lockprotos() {
  if (has_lockprotos()) {
    delete requestMessage_.lockprotos_;
    clear_has_requestMessage();
  }
}
inline  const ::LockProtos& MattiResponse::lockprotos() const {
  // @@protoc_insertion_point(field_get:MattiResponse.lockProtos)
  return has_lockprotos()
      ? *requestMessage_.lockprotos_
      : ::LockProtos::default_instance();
}
inline ::LockProtos* MattiResponse::mutable_lockprotos() {
  if (!has_lockprotos()) {
    clear_requestMessage();
    set_has_lockprotos();
    requestMessage_.lockprotos_ = new ::LockProtos;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.lockProtos)
  return requestMessage_.lockprotos_;
}
inline ::LockProtos* MattiResponse::release_lockprotos() {
  if (has_lockprotos()) {
    clear_has_requestMessage();
    ::LockProtos* temp = requestMessage_.lockprotos_;
    requestMessage_.lockprotos_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_lockprotos(::LockProtos* lockprotos) {
  clear_requestMessage();
  if (lockprotos) {
    set_has_lockprotos();
    requestMessage_.lockprotos_ = lockprotos;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.lockProtos)
}

inline bool MattiResponse::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
inline void MattiResponse::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
inline MattiResponse::RequestMessageCase MattiResponse::requestMessage_case() const {
  return MattiResponse::RequestMessageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MattiResponse_2eproto__INCLUDED
