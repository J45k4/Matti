// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiRequest.proto

#ifndef PROTOBUF_MattiRequest_2eproto__INCLUDED
#define PROTOBUF_MattiRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RequestValue.pb.h"
#include "MakeConnectionRequest.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MattiRequest_2eproto();
void protobuf_AssignDesc_MattiRequest_2eproto();
void protobuf_ShutdownFile_MattiRequest_2eproto();

class MattiRequest;

// ===================================================================

class MattiRequest : public ::google::protobuf::Message {
 public:
  MattiRequest();
  virtual ~MattiRequest();

  MattiRequest(const MattiRequest& from);

  inline MattiRequest& operator=(const MattiRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MattiRequest& default_instance();

  enum RequestMessageCase {
    kMakeVideoConnection = 2,
    kRequestValue = 3,
    REQUESTMESSAGE_NOT_SET = 0,
  };

  void Swap(MattiRequest* other);

  // implements Message ----------------------------------------------

  inline MattiRequest* New() const { return New(NULL); }

  MattiRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MattiRequest& from);
  void MergeFrom(const MattiRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MattiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  ::google::protobuf::uint32 ticket() const;
  void set_ticket(::google::protobuf::uint32 value);

  // optional .MakeVideoConnection makeVideoConnection = 2;
  bool has_makevideoconnection() const;
  void clear_makevideoconnection();
  static const int kMakeVideoConnectionFieldNumber = 2;
  const ::MakeVideoConnection& makevideoconnection() const;
  ::MakeVideoConnection* mutable_makevideoconnection();
  ::MakeVideoConnection* release_makevideoconnection();
  void set_allocated_makevideoconnection(::MakeVideoConnection* makevideoconnection);

  // optional .RequestValue requestValue = 3;
  bool has_requestvalue() const;
  void clear_requestvalue();
  static const int kRequestValueFieldNumber = 3;
  const ::RequestValue& requestvalue() const;
  ::RequestValue* mutable_requestvalue();
  ::RequestValue* release_requestvalue();
  void set_allocated_requestvalue(::RequestValue* requestvalue);

  RequestMessageCase requestMessage_case() const;
  // @@protoc_insertion_point(class_scope:MattiRequest)
 private:
  inline void set_has_makevideoconnection();
  inline void set_has_requestvalue();

  inline bool has_requestMessage() const;
  void clear_requestMessage();
  inline void clear_has_requestMessage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 ticket_;
  union RequestMessageUnion {
    RequestMessageUnion() {}
    ::MakeVideoConnection* makevideoconnection_;
    ::RequestValue* requestvalue_;
  } requestMessage_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MattiRequest_2eproto();
  friend void protobuf_AssignDesc_MattiRequest_2eproto();
  friend void protobuf_ShutdownFile_MattiRequest_2eproto();

  void InitAsDefaultInstance();
  static MattiRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiRequest

// optional uint32 ticket = 1;
inline void MattiRequest::clear_ticket() {
  ticket_ = 0u;
}
inline ::google::protobuf::uint32 MattiRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MattiRequest.ticket)
  return ticket_;
}
inline void MattiRequest::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiRequest.ticket)
}

// optional .MakeVideoConnection makeVideoConnection = 2;
inline bool MattiRequest::has_makevideoconnection() const {
  return requestMessage_case() == kMakeVideoConnection;
}
inline void MattiRequest::set_has_makevideoconnection() {
  _oneof_case_[0] = kMakeVideoConnection;
}
inline void MattiRequest::clear_makevideoconnection() {
  if (has_makevideoconnection()) {
    delete requestMessage_.makevideoconnection_;
    clear_has_requestMessage();
  }
}
inline  const ::MakeVideoConnection& MattiRequest::makevideoconnection() const {
  // @@protoc_insertion_point(field_get:MattiRequest.makeVideoConnection)
  return has_makevideoconnection()
      ? *requestMessage_.makevideoconnection_
      : ::MakeVideoConnection::default_instance();
}
inline ::MakeVideoConnection* MattiRequest::mutable_makevideoconnection() {
  if (!has_makevideoconnection()) {
    clear_requestMessage();
    set_has_makevideoconnection();
    requestMessage_.makevideoconnection_ = new ::MakeVideoConnection;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.makeVideoConnection)
  return requestMessage_.makevideoconnection_;
}
inline ::MakeVideoConnection* MattiRequest::release_makevideoconnection() {
  if (has_makevideoconnection()) {
    clear_has_requestMessage();
    ::MakeVideoConnection* temp = requestMessage_.makevideoconnection_;
    requestMessage_.makevideoconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_makevideoconnection(::MakeVideoConnection* makevideoconnection) {
  clear_requestMessage();
  if (makevideoconnection) {
    set_has_makevideoconnection();
    requestMessage_.makevideoconnection_ = makevideoconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.makeVideoConnection)
}

// optional .RequestValue requestValue = 3;
inline bool MattiRequest::has_requestvalue() const {
  return requestMessage_case() == kRequestValue;
}
inline void MattiRequest::set_has_requestvalue() {
  _oneof_case_[0] = kRequestValue;
}
inline void MattiRequest::clear_requestvalue() {
  if (has_requestvalue()) {
    delete requestMessage_.requestvalue_;
    clear_has_requestMessage();
  }
}
inline  const ::RequestValue& MattiRequest::requestvalue() const {
  // @@protoc_insertion_point(field_get:MattiRequest.requestValue)
  return has_requestvalue()
      ? *requestMessage_.requestvalue_
      : ::RequestValue::default_instance();
}
inline ::RequestValue* MattiRequest::mutable_requestvalue() {
  if (!has_requestvalue()) {
    clear_requestMessage();
    set_has_requestvalue();
    requestMessage_.requestvalue_ = new ::RequestValue;
  }
  // @@protoc_insertion_point(field_mutable:MattiRequest.requestValue)
  return requestMessage_.requestvalue_;
}
inline ::RequestValue* MattiRequest::release_requestvalue() {
  if (has_requestvalue()) {
    clear_has_requestMessage();
    ::RequestValue* temp = requestMessage_.requestvalue_;
    requestMessage_.requestvalue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiRequest::set_allocated_requestvalue(::RequestValue* requestvalue) {
  clear_requestMessage();
  if (requestvalue) {
    set_has_requestvalue();
    requestMessage_.requestvalue_ = requestvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiRequest.requestValue)
}

inline bool MattiRequest::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
inline void MattiRequest::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
inline MattiRequest::RequestMessageCase MattiRequest::requestMessage_case() const {
  return MattiRequest::RequestMessageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MattiRequest_2eproto__INCLUDED
