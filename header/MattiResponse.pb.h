// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MattiResponse.proto

#ifndef PROTOBUF_MattiResponse_2eproto__INCLUDED
#define PROTOBUF_MattiResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ValueMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MattiResponse_2eproto();
void protobuf_AssignDesc_MattiResponse_2eproto();
void protobuf_ShutdownFile_MattiResponse_2eproto();

class MattiResponse;

// ===================================================================

class MattiResponse : public ::google::protobuf::Message {
 public:
  MattiResponse();
  virtual ~MattiResponse();

  MattiResponse(const MattiResponse& from);

  inline MattiResponse& operator=(const MattiResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MattiResponse& default_instance();

  enum RequestMessageCase {
    kValueMessage = 2,
    REQUESTMESSAGE_NOT_SET = 0,
  };

  void Swap(MattiResponse* other);

  // implements Message ----------------------------------------------

  inline MattiResponse* New() const { return New(NULL); }

  MattiResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MattiResponse& from);
  void MergeFrom(const MattiResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MattiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  ::google::protobuf::uint32 ticket() const;
  void set_ticket(::google::protobuf::uint32 value);

  // optional .ValueMessage valueMessage = 2;
  bool has_valuemessage() const;
  void clear_valuemessage();
  static const int kValueMessageFieldNumber = 2;
  const ::ValueMessage& valuemessage() const;
  ::ValueMessage* mutable_valuemessage();
  ::ValueMessage* release_valuemessage();
  void set_allocated_valuemessage(::ValueMessage* valuemessage);

  RequestMessageCase requestMessage_case() const;
  // @@protoc_insertion_point(class_scope:MattiResponse)
 private:
  inline void set_has_valuemessage();

  inline bool has_requestMessage() const;
  void clear_requestMessage();
  inline void clear_has_requestMessage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 ticket_;
  union RequestMessageUnion {
    RequestMessageUnion() {}
    ::ValueMessage* valuemessage_;
  } requestMessage_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MattiResponse_2eproto();
  friend void protobuf_AssignDesc_MattiResponse_2eproto();
  friend void protobuf_ShutdownFile_MattiResponse_2eproto();

  void InitAsDefaultInstance();
  static MattiResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MattiResponse

// optional uint32 ticket = 1;
inline void MattiResponse::clear_ticket() {
  ticket_ = 0u;
}
inline ::google::protobuf::uint32 MattiResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MattiResponse.ticket)
  return ticket_;
}
inline void MattiResponse::set_ticket(::google::protobuf::uint32 value) {
  
  ticket_ = value;
  // @@protoc_insertion_point(field_set:MattiResponse.ticket)
}

// optional .ValueMessage valueMessage = 2;
inline bool MattiResponse::has_valuemessage() const {
  return requestMessage_case() == kValueMessage;
}
inline void MattiResponse::set_has_valuemessage() {
  _oneof_case_[0] = kValueMessage;
}
inline void MattiResponse::clear_valuemessage() {
  if (has_valuemessage()) {
    delete requestMessage_.valuemessage_;
    clear_has_requestMessage();
  }
}
inline  const ::ValueMessage& MattiResponse::valuemessage() const {
  // @@protoc_insertion_point(field_get:MattiResponse.valueMessage)
  return has_valuemessage()
      ? *requestMessage_.valuemessage_
      : ::ValueMessage::default_instance();
}
inline ::ValueMessage* MattiResponse::mutable_valuemessage() {
  if (!has_valuemessage()) {
    clear_requestMessage();
    set_has_valuemessage();
    requestMessage_.valuemessage_ = new ::ValueMessage;
  }
  // @@protoc_insertion_point(field_mutable:MattiResponse.valueMessage)
  return requestMessage_.valuemessage_;
}
inline ::ValueMessage* MattiResponse::release_valuemessage() {
  if (has_valuemessage()) {
    clear_has_requestMessage();
    ::ValueMessage* temp = requestMessage_.valuemessage_;
    requestMessage_.valuemessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MattiResponse::set_allocated_valuemessage(::ValueMessage* valuemessage) {
  clear_requestMessage();
  if (valuemessage) {
    set_has_valuemessage();
    requestMessage_.valuemessage_ = valuemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:MattiResponse.valueMessage)
}

inline bool MattiResponse::has_requestMessage() const {
  return requestMessage_case() != REQUESTMESSAGE_NOT_SET;
}
inline void MattiResponse::clear_has_requestMessage() {
  _oneof_case_[0] = REQUESTMESSAGE_NOT_SET;
}
inline MattiResponse::RequestMessageCase MattiResponse::requestMessage_case() const {
  return MattiResponse::RequestMessageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MattiResponse_2eproto__INCLUDED
